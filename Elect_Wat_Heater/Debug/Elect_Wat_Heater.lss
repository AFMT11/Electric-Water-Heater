
Elect_Wat_Heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001816  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001816  000018aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  00800070  00800070  000018ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003734  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000116e  00000000  00000000  0000539c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f13  00000000  00000000  0000650a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a90  00000000  00000000  00008420  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a95  00000000  00000000  00008eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000030c3  00000000  00000000  00009945  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000ca08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__vector_4>
      14:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__vector_9>
      28:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__vector_10>
      2c:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 05 	call	0xaa6	; 0xaa6 <main>
      8a:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ds18b20crc8>:
	//Poor DS18B20 feels better then...
	*port |= mask;
	*direction |= mask;

	return DS18B20_ERROR_OK;
}
      92:	dc 01       	movw	r26, r24
      94:	80 e0       	ldi	r24, 0x00	; 0
      96:	40 e0       	ldi	r20, 0x00	; 0
      98:	12 c0       	rjmp	.+36     	; 0xbe <ds18b20crc8+0x2c>
      9a:	fd 01       	movw	r30, r26
      9c:	e4 0f       	add	r30, r20
      9e:	f1 1d       	adc	r31, r1
      a0:	20 81       	ld	r18, Z
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	09 c0       	rjmp	.+18     	; 0xb8 <ds18b20crc8+0x26>
      a6:	38 2f       	mov	r19, r24
      a8:	32 27       	eor	r19, r18
      aa:	86 95       	lsr	r24
      ac:	30 ff       	sbrs	r19, 0
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <ds18b20crc8+0x22>
      b0:	3c e8       	ldi	r19, 0x8C	; 140
      b2:	83 27       	eor	r24, r19
      b4:	26 95       	lsr	r18
      b6:	9f 5f       	subi	r25, 0xFF	; 255
      b8:	98 30       	cpi	r25, 0x08	; 8
      ba:	a8 f3       	brcs	.-22     	; 0xa6 <ds18b20crc8+0x14>
      bc:	4f 5f       	subi	r20, 0xFF	; 255
      be:	46 17       	cp	r20, r22
      c0:	60 f3       	brcs	.-40     	; 0x9a <ds18b20crc8+0x8>
      c2:	08 95       	ret

000000c4 <ds18b20match>:
      c4:	8f 92       	push	r8
      c6:	9f 92       	push	r9
      c8:	af 92       	push	r10
      ca:	bf 92       	push	r11
      cc:	cf 92       	push	r12
      ce:	df 92       	push	r13
      d0:	ef 92       	push	r14
      d2:	ff 92       	push	r15
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	7c 01       	movw	r14, r24
      de:	6b 01       	movw	r12, r22
      e0:	5a 01       	movw	r10, r20
      e2:	d2 2f       	mov	r29, r18
      e4:	48 01       	movw	r8, r16
      e6:	01 2b       	or	r16, r17
      e8:	21 f4       	brne	.+8      	; 0xf2 <ds18b20match+0x2e>
      ea:	0c ec       	ldi	r16, 0xCC	; 204
      ec:	0e 94 51 02 	call	0x4a2	; 0x4a2 <onewireWrite>
      f0:	12 c0       	rjmp	.+36     	; 0x116 <ds18b20match+0x52>
      f2:	05 e5       	ldi	r16, 0x55	; 85
      f4:	0e 94 51 02 	call	0x4a2	; 0x4a2 <onewireWrite>
      f8:	c0 e0       	ldi	r28, 0x00	; 0
      fa:	0b c0       	rjmp	.+22     	; 0x112 <ds18b20match+0x4e>
      fc:	f4 01       	movw	r30, r8
      fe:	ec 0f       	add	r30, r28
     100:	f1 1d       	adc	r31, r1
     102:	00 81       	ld	r16, Z
     104:	2d 2f       	mov	r18, r29
     106:	a5 01       	movw	r20, r10
     108:	b6 01       	movw	r22, r12
     10a:	c7 01       	movw	r24, r14
     10c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <onewireWrite>
     110:	cf 5f       	subi	r28, 0xFF	; 255
     112:	c8 30       	cpi	r28, 0x08	; 8
     114:	98 f3       	brcs	.-26     	; 0xfc <ds18b20match+0x38>
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	1f 91       	pop	r17
     11c:	0f 91       	pop	r16
     11e:	ff 90       	pop	r15
     120:	ef 90       	pop	r14
     122:	df 90       	pop	r13
     124:	cf 90       	pop	r12
     126:	bf 90       	pop	r11
     128:	af 90       	pop	r10
     12a:	9f 90       	pop	r9
     12c:	8f 90       	pop	r8
     12e:	08 95       	ret

00000130 <ds18b20convert>:
     130:	bf 92       	push	r11
     132:	cf 92       	push	r12
     134:	df 92       	push	r13
     136:	ef 92       	push	r14
     138:	ff 92       	push	r15
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	ec 01       	movw	r28, r24
     144:	7b 01       	movw	r14, r22
     146:	6a 01       	movw	r12, r20
     148:	b2 2e       	mov	r11, r18
     14a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <onewireInit>
     14e:	81 30       	cpi	r24, 0x01	; 1
     150:	71 f0       	breq	.+28     	; 0x16e <ds18b20convert+0x3e>
     152:	2b 2d       	mov	r18, r11
     154:	a6 01       	movw	r20, r12
     156:	b7 01       	movw	r22, r14
     158:	ce 01       	movw	r24, r28
     15a:	0e 94 62 00 	call	0xc4	; 0xc4 <ds18b20match>
     15e:	04 e4       	ldi	r16, 0x44	; 68
     160:	2b 2d       	mov	r18, r11
     162:	a6 01       	movw	r20, r12
     164:	b7 01       	movw	r22, r14
     166:	ce 01       	movw	r24, r28
     168:	0e 94 51 02 	call	0x4a2	; 0x4a2 <onewireWrite>
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	ff 90       	pop	r15
     178:	ef 90       	pop	r14
     17a:	df 90       	pop	r13
     17c:	cf 90       	pop	r12
     17e:	bf 90       	pop	r11
     180:	08 95       	ret

00000182 <ds18b20rsp>:
     182:	8f 92       	push	r8
     184:	9f 92       	push	r9
     186:	af 92       	push	r10
     188:	bf 92       	push	r11
     18a:	cf 92       	push	r12
     18c:	df 92       	push	r13
     18e:	ef 92       	push	r14
     190:	ff 92       	push	r15
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	6c 01       	movw	r12, r24
     19c:	5b 01       	movw	r10, r22
     19e:	4a 01       	movw	r8, r20
     1a0:	d2 2f       	mov	r29, r18
     1a2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <onewireInit>
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	d9 f1       	breq	.+118    	; 0x220 <ds18b20rsp+0x9e>
     1aa:	2d 2f       	mov	r18, r29
     1ac:	a4 01       	movw	r20, r8
     1ae:	b5 01       	movw	r22, r10
     1b0:	c6 01       	movw	r24, r12
     1b2:	0e 94 62 00 	call	0xc4	; 0xc4 <ds18b20match>
     1b6:	0e eb       	ldi	r16, 0xBE	; 190
     1b8:	2d 2f       	mov	r18, r29
     1ba:	a4 01       	movw	r20, r8
     1bc:	b5 01       	movw	r22, r10
     1be:	c6 01       	movw	r24, r12
     1c0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <onewireWrite>
     1c4:	c0 e0       	ldi	r28, 0x00	; 0
     1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <ds18b20rsp+0x5e>
     1c8:	87 01       	movw	r16, r14
     1ca:	0c 0f       	add	r16, r28
     1cc:	11 1d       	adc	r17, r1
     1ce:	2d 2f       	mov	r18, r29
     1d0:	a4 01       	movw	r20, r8
     1d2:	b5 01       	movw	r22, r10
     1d4:	c6 01       	movw	r24, r12
     1d6:	0e 94 a3 02 	call	0x546	; 0x546 <onewireRead>
     1da:	f8 01       	movw	r30, r16
     1dc:	80 83       	st	Z, r24
     1de:	cf 5f       	subi	r28, 0xFF	; 255
     1e0:	c9 30       	cpi	r28, 0x09	; 9
     1e2:	90 f3       	brcs	.-28     	; 0x1c8 <ds18b20rsp+0x46>
     1e4:	f7 01       	movw	r30, r14
     1e6:	70 81       	ld	r23, Z
     1e8:	81 81       	ldd	r24, Z+1	; 0x01
     1ea:	62 81       	ldd	r22, Z+2	; 0x02
     1ec:	53 81       	ldd	r21, Z+3	; 0x03
     1ee:	44 81       	ldd	r20, Z+4	; 0x04
     1f0:	35 81       	ldd	r19, Z+5	; 0x05
     1f2:	26 81       	ldd	r18, Z+6	; 0x06
     1f4:	97 81       	ldd	r25, Z+7	; 0x07
     1f6:	87 2b       	or	r24, r23
     1f8:	86 2b       	or	r24, r22
     1fa:	85 2b       	or	r24, r21
     1fc:	84 2b       	or	r24, r20
     1fe:	83 2b       	or	r24, r19
     200:	82 2b       	or	r24, r18
     202:	89 2b       	or	r24, r25
     204:	51 f0       	breq	.+20     	; 0x21a <ds18b20rsp+0x98>
     206:	68 e0       	ldi	r22, 0x08	; 8
     208:	c7 01       	movw	r24, r14
     20a:	0e 94 49 00 	call	0x92	; 0x92 <ds18b20crc8>
     20e:	f7 01       	movw	r30, r14
     210:	90 85       	ldd	r25, Z+8	; 0x08
     212:	89 17       	cp	r24, r25
     214:	21 f0       	breq	.+8      	; 0x21e <ds18b20rsp+0x9c>
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	03 c0       	rjmp	.+6      	; 0x220 <ds18b20rsp+0x9e>
     21a:	83 e0       	ldi	r24, 0x03	; 3
     21c:	01 c0       	rjmp	.+2      	; 0x220 <ds18b20rsp+0x9e>
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	df 90       	pop	r13
     22e:	cf 90       	pop	r12
     230:	bf 90       	pop	r11
     232:	af 90       	pop	r10
     234:	9f 90       	pop	r9
     236:	8f 90       	pop	r8
     238:	08 95       	ret

0000023a <ds18b20read>:

//! Read temperature
uint8_t ds18b20read( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *rom, int16_t *temperature )
{
     23a:	cf 92       	push	r12
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	29 97       	sbiw	r28, 0x09	; 9
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	67 01       	movw	r12, r14

	uint8_t sp[9];
	uint8_t ec = 0;

	//Communication, pull-up, CRC checks happen here
	ec = ds18b20rsp( port, direction, portin, mask, rom, sp );
     25c:	fe 01       	movw	r30, r28
     25e:	31 96       	adiw	r30, 0x01	; 1
     260:	7f 01       	movw	r14, r30
     262:	0e 94 c1 00 	call	0x182	; 0x182 <ds18b20rsp>

	if ( ec != DS18B20_ERROR_OK )
     266:	88 23       	and	r24, r24
     268:	21 f0       	breq	.+8      	; 0x272 <ds18b20read+0x38>
	{
		*temperature = 0;
     26a:	f6 01       	movw	r30, r12
     26c:	11 82       	std	Z+1, r1	; 0x01
     26e:	10 82       	st	Z, r1
		return ec;
     270:	14 c0       	rjmp	.+40     	; 0x29a <ds18b20read+0x60>
	}

	//Get temperature from received data
	*temperature = (Uint8)((( sp[1] << 8 ) + sp[0]) >> 4);
     272:	8a 81       	ldd	r24, Y+2	; 0x02
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	98 2f       	mov	r25, r24
     278:	88 27       	eor	r24, r24
     27a:	29 81       	ldd	r18, Y+1	; 0x01
     27c:	82 0f       	add	r24, r18
     27e:	91 1d       	adc	r25, r1
     280:	95 95       	asr	r25
     282:	87 95       	ror	r24
     284:	95 95       	asr	r25
     286:	87 95       	ror	r24
     288:	95 95       	asr	r25
     28a:	87 95       	ror	r24
     28c:	95 95       	asr	r25
     28e:	87 95       	ror	r24
     290:	99 27       	eor	r25, r25
     292:	f6 01       	movw	r30, r12
     294:	91 83       	std	Z+1, r25	; 0x01
     296:	80 83       	st	Z, r24

	return DS18B20_ERROR_OK;
     298:	80 e0       	ldi	r24, 0x00	; 0
}
     29a:	29 96       	adiw	r28, 0x09	; 9
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	f8 94       	cli
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	0f be       	out	0x3f, r0	; 63
     2a4:	cd bf       	out	0x3d, r28	; 61
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	1f 91       	pop	r17
     2ac:	0f 91       	pop	r16
     2ae:	ff 90       	pop	r15
     2b0:	ef 90       	pop	r14
     2b2:	df 90       	pop	r13
     2b4:	cf 90       	pop	r12
     2b6:	08 95       	ret

000002b8 <EEPROM_INIT>:
	//sending the data byte
	I2C_SendString(Data);
	//Sending stop condition
	I2C_SendStopCond();	
	_delay_ms(10);
}
     2b8:	0e 94 9e 01 	call	0x33c	; 0x33c <I2C_INIT>
     2bc:	08 95       	ret

000002be <EEPROM_WriteByte>:
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	16 2f       	mov	r17, r22
     2c6:	d4 2f       	mov	r29, r20
     2c8:	88 30       	cpi	r24, 0x08	; 8
     2ca:	08 f0       	brcs	.+2      	; 0x2ce <EEPROM_WriteByte+0x10>
     2cc:	87 e0       	ldi	r24, 0x07	; 7
     2ce:	c8 2f       	mov	r28, r24
     2d0:	c0 65       	ori	r28, 0x50	; 80
     2d2:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_SendStartCond>
     2d6:	8c 2f       	mov	r24, r28
     2d8:	0e 94 b2 01 	call	0x364	; 0x364 <I2C_SendSlaveAdd_WriteOP>
     2dc:	81 2f       	mov	r24, r17
     2de:	0e 94 ce 01 	call	0x39c	; 0x39c <I2C_SendData>
     2e2:	8d 2f       	mov	r24, r29
     2e4:	0e 94 ce 01 	call	0x39c	; 0x39c <I2C_SendData>
     2e8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <I2C_SendStopCond>
     2ec:	8f e3       	ldi	r24, 0x3F	; 63
     2ee:	9c e9       	ldi	r25, 0x9C	; 156
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <EEPROM_WriteByte+0x32>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <EEPROM_WriteByte+0x38>
     2f6:	00 00       	nop
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	08 95       	ret

00000300 <EEPROM_ReadByte>:


Uint8 EEPROM_ReadByte(Uint8 Device_Page, Uint8 Data_Add)
{
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	d6 2f       	mov	r29, r22
	Uint8 Data = 0;
	if (Device_Page > 7)
     306:	88 30       	cpi	r24, 0x08	; 8
     308:	08 f0       	brcs	.+2      	; 0x30c <EEPROM_ReadByte+0xc>
	Device_Page = 7;
     30a:	87 e0       	ldi	r24, 0x07	; 7
	//Device address calculation
	Uint8 Device_Add = 0X50 | Device_Page;
     30c:	c8 2f       	mov	r28, r24
     30e:	c0 65       	ori	r28, 0x50	; 80
	//Sending start condition
	I2C_SendStartCond();
     310:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_SendStartCond>
	//sending slave address with write operation
	I2C_SendSlaveAdd_WriteOP(Device_Add);
     314:	8c 2f       	mov	r24, r28
     316:	0e 94 b2 01 	call	0x364	; 0x364 <I2C_SendSlaveAdd_WriteOP>
	//sending data byte address
	I2C_SendData(Data_Add);
     31a:	8d 2f       	mov	r24, r29
     31c:	0e 94 ce 01 	call	0x39c	; 0x39c <I2C_SendData>
	
	//Sending repeated start condition
	I2C_SendRepStartCond();
     320:	0e 94 ac 01 	call	0x358	; 0x358 <I2C_SendRepStartCond>
	//sending slave address with read operation
	I2C_SendSlaveAdd_ReadOP(Device_Add);	
     324:	8c 2f       	mov	r24, r28
     326:	0e 94 c3 01 	call	0x386	; 0x386 <I2C_SendSlaveAdd_ReadOP>
	//Receiving the data byte
	Data = I2C_ReadData();
     32a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <I2C_ReadData>
     32e:	c8 2f       	mov	r28, r24
	//Sending stop condition
	I2C_SendStopCond();	
     330:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <I2C_SendStopCond>
	
	return Data;
}
     334:	8c 2f       	mov	r24, r28
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <I2C_INIT>:
// 	{
// 		(*pptr0)();
// 		(*pptr1)(string16);
// 	}
	return TWDR;
}
     33c:	80 e8       	ldi	r24, 0x80	; 128
     33e:	8f bf       	out	0x3f, r24	; 63
     340:	84 e0       	ldi	r24, 0x04	; 4
     342:	86 bf       	out	0x36, r24	; 54
     344:	8c e0       	ldi	r24, 0x0C	; 12
     346:	80 b9       	out	0x00, r24	; 0
     348:	11 b8       	out	0x01, r1	; 1
     34a:	08 95       	ret

0000034c <I2C_SendStartCond>:
     34c:	84 ea       	ldi	r24, 0xA4	; 164
     34e:	86 bf       	out	0x36, r24	; 54
     350:	06 b6       	in	r0, 0x36	; 54
     352:	07 fe       	sbrs	r0, 7
     354:	fd cf       	rjmp	.-6      	; 0x350 <I2C_SendStartCond+0x4>
     356:	08 95       	ret

00000358 <I2C_SendRepStartCond>:
     358:	84 ea       	ldi	r24, 0xA4	; 164
     35a:	86 bf       	out	0x36, r24	; 54
     35c:	06 b6       	in	r0, 0x36	; 54
     35e:	07 fe       	sbrs	r0, 7
     360:	fd cf       	rjmp	.-6      	; 0x35c <I2C_SendRepStartCond+0x4>
     362:	08 95       	ret

00000364 <I2C_SendSlaveAdd_WriteOP>:
     364:	88 0f       	add	r24, r24
     366:	83 b9       	out	0x03, r24	; 3
     368:	84 e8       	ldi	r24, 0x84	; 132
     36a:	86 bf       	out	0x36, r24	; 54
     36c:	06 b6       	in	r0, 0x36	; 54
     36e:	07 fe       	sbrs	r0, 7
     370:	fd cf       	rjmp	.-6      	; 0x36c <I2C_SendSlaveAdd_WriteOP+0x8>
     372:	2f ef       	ldi	r18, 0xFF	; 255
     374:	81 ee       	ldi	r24, 0xE1	; 225
     376:	94 e0       	ldi	r25, 0x04	; 4
     378:	21 50       	subi	r18, 0x01	; 1
     37a:	80 40       	sbci	r24, 0x00	; 0
     37c:	90 40       	sbci	r25, 0x00	; 0
     37e:	e1 f7       	brne	.-8      	; 0x378 <I2C_SendSlaveAdd_WriteOP+0x14>
     380:	00 c0       	rjmp	.+0      	; 0x382 <I2C_SendSlaveAdd_WriteOP+0x1e>
     382:	00 00       	nop
     384:	08 95       	ret

00000386 <I2C_SendSlaveAdd_ReadOP>:
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	81 60       	ori	r24, 0x01	; 1
     38e:	83 b9       	out	0x03, r24	; 3
     390:	84 e8       	ldi	r24, 0x84	; 132
     392:	86 bf       	out	0x36, r24	; 54
     394:	06 b6       	in	r0, 0x36	; 54
     396:	07 fe       	sbrs	r0, 7
     398:	fd cf       	rjmp	.-6      	; 0x394 <I2C_SendSlaveAdd_ReadOP+0xe>
     39a:	08 95       	ret

0000039c <I2C_SendData>:
     39c:	83 b9       	out	0x03, r24	; 3
     39e:	84 e8       	ldi	r24, 0x84	; 132
     3a0:	86 bf       	out	0x36, r24	; 54
     3a2:	06 b6       	in	r0, 0x36	; 54
     3a4:	07 fe       	sbrs	r0, 7
     3a6:	fd cf       	rjmp	.-6      	; 0x3a2 <I2C_SendData+0x6>
     3a8:	08 95       	ret

000003aa <I2C_ReadData>:
     3aa:	84 e8       	ldi	r24, 0x84	; 132
     3ac:	86 bf       	out	0x36, r24	; 54
     3ae:	06 b6       	in	r0, 0x36	; 54
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <I2C_ReadData+0x4>
     3b4:	83 b1       	in	r24, 0x03	; 3
     3b6:	08 95       	ret

000003b8 <I2C_SendStopCond>:

void I2C_SendStopCond(void)
{
	TWCR = (1<<TWSTO)|(1<<TWEN)|(1<<TWINT);
     3b8:	84 e9       	ldi	r24, 0x94	; 148
     3ba:	86 bf       	out	0x36, r24	; 54
	Set_Bit(TWCR, 7);
     3bc:	86 b7       	in	r24, 0x36	; 54
     3be:	80 68       	ori	r24, 0x80	; 128
     3c0:	86 bf       	out	0x36, r24	; 54
     3c2:	08 95       	ret

000003c4 <onewireInit>:
#include <inttypes.h>
#include "onewire.h"

//! Initializes 1wire bus before transmission
uint8_t onewireInit( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	dc 01       	movw	r26, r24
     3ca:	fb 01       	movw	r30, r22
	uint8_t response = 0;
	uint8_t sreg = SREG; //Store status register
     3cc:	3f b7       	in	r19, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	*port |= mask; //Write 1 to output
     3ce:	8c 91       	ld	r24, X
     3d0:	82 2b       	or	r24, r18
     3d2:	8c 93       	st	X, r24
	*direction |= mask; //Set port to output
     3d4:	80 81       	ld	r24, Z
     3d6:	82 2b       	or	r24, r18
     3d8:	80 83       	st	Z, r24
	*port &= ~mask; //Write 0 to output
     3da:	9c 91       	ld	r25, X
     3dc:	82 2f       	mov	r24, r18
     3de:	80 95       	com	r24
     3e0:	98 23       	and	r25, r24
     3e2:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e4:	cf e5       	ldi	r28, 0x5F	; 95
     3e6:	d9 e0       	ldi	r29, 0x09	; 9
     3e8:	21 97       	sbiw	r28, 0x01	; 1
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <onewireInit+0x24>
     3ec:	00 c0       	rjmp	.+0      	; 0x3ee <onewireInit+0x2a>
     3ee:	00 00       	nop

	_delay_us( 600 );

	*direction &= ~mask; //Set port to input
     3f0:	90 81       	ld	r25, Z
     3f2:	89 23       	and	r24, r25
     3f4:	80 83       	st	Z, r24
     3f6:	87 e1       	ldi	r24, 0x17	; 23
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <onewireInit+0x36>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	00 00       	nop

	_delay_us( 70 );

	response = *portin & mask; //Read input
     402:	ea 01       	movw	r28, r20
     404:	98 81       	ld	r25, Y
     406:	92 23       	and	r25, r18
     408:	cf e1       	ldi	r28, 0x1F	; 31
     40a:	d3 e0       	ldi	r29, 0x03	; 3
     40c:	21 97       	sbiw	r28, 0x01	; 1
     40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     412:	00 00       	nop

	_delay_us( 200 );

	*port |= mask; //Write 1 to output
     414:	8c 91       	ld	r24, X
     416:	82 2b       	or	r24, r18
     418:	8c 93       	st	X, r24
	*direction |= mask; //Set port to output
     41a:	80 81       	ld	r24, Z
     41c:	28 2b       	or	r18, r24
     41e:	20 83       	st	Z, r18
     420:	ef e5       	ldi	r30, 0x5F	; 95
     422:	f9 e0       	ldi	r31, 0x09	; 9
     424:	31 97       	sbiw	r30, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     42a:	00 00       	nop

	_delay_us( 600 );

	SREG = sreg; //Restore status register
     42c:	3f bf       	out	0x3f, r19	; 63

	return response != 0 ? ONEWIRE_ERROR_COMM : ONEWIRE_ERROR_OK;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	91 11       	cpse	r25, r1
     432:	01 c0       	rjmp	.+2      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     434:	80 e0       	ldi	r24, 0x00	; 0
}
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <onewireWriteBit>:

//! Sends a single bit over the 1wire bus
uint8_t onewireWriteBit( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t bit )
{
     43c:	0f 93       	push	r16
     43e:	fc 01       	movw	r30, r24
	uint8_t sreg = SREG;
     440:	9f b7       	in	r25, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	*port |= mask; //Write 1 to output
     442:	80 81       	ld	r24, Z
     444:	82 2b       	or	r24, r18
     446:	80 83       	st	Z, r24
	*direction |= mask;
     448:	db 01       	movw	r26, r22
     44a:	8c 91       	ld	r24, X
     44c:	82 2b       	or	r24, r18
     44e:	8c 93       	st	X, r24
	*port &= ~mask; //Write 0 to output
     450:	80 81       	ld	r24, Z
     452:	32 2f       	mov	r19, r18
     454:	30 95       	com	r19
     456:	83 23       	and	r24, r19
     458:	80 83       	st	Z, r24

	if ( bit != 0 ) _delay_us( 8 );
     45a:	00 23       	and	r16, r16
     45c:	29 f0       	breq	.+10     	; 0x468 <onewireWriteBit+0x2c>
     45e:	ba e2       	ldi	r27, 0x2A	; 42
     460:	ba 95       	dec	r27
     462:	f1 f7       	brne	.-4      	; 0x460 <onewireWriteBit+0x24>
     464:	00 c0       	rjmp	.+0      	; 0x466 <onewireWriteBit+0x2a>
     466:	06 c0       	rjmp	.+12     	; 0x474 <onewireWriteBit+0x38>
     468:	af e3       	ldi	r26, 0x3F	; 63
     46a:	b1 e0       	ldi	r27, 0x01	; 1
     46c:	11 97       	sbiw	r26, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <onewireWriteBit+0x30>
     470:	00 c0       	rjmp	.+0      	; 0x472 <onewireWriteBit+0x36>
     472:	00 00       	nop
	else _delay_us( 80 );

	*port |= mask;
     474:	80 81       	ld	r24, Z
     476:	28 2b       	or	r18, r24
     478:	20 83       	st	Z, r18

	if ( bit != 0 ) _delay_us( 80 );
     47a:	00 23       	and	r16, r16
     47c:	39 f0       	breq	.+14     	; 0x48c <onewireWriteBit+0x50>
     47e:	ef e3       	ldi	r30, 0x3F	; 63
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	31 97       	sbiw	r30, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <onewireWriteBit+0x46>
     486:	00 c0       	rjmp	.+0      	; 0x488 <onewireWriteBit+0x4c>
     488:	00 00       	nop
     48a:	04 c0       	rjmp	.+8      	; 0x494 <onewireWriteBit+0x58>
     48c:	fa e0       	ldi	r31, 0x0A	; 10
     48e:	fa 95       	dec	r31
     490:	f1 f7       	brne	.-4      	; 0x48e <onewireWriteBit+0x52>
     492:	00 c0       	rjmp	.+0      	; 0x494 <onewireWriteBit+0x58>
	else _delay_us( 2 );

	SREG = sreg;
     494:	9f bf       	out	0x3f, r25	; 63

	return bit != 0;
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	01 11       	cpse	r16, r1
     49a:	01 c0       	rjmp	.+2      	; 0x49e <onewireWriteBit+0x62>
     49c:	80 e0       	ldi	r24, 0x00	; 0
}
     49e:	0f 91       	pop	r16
     4a0:	08 95       	ret

000004a2 <onewireWrite>:

//! Transmits a byte over 1wire bus
void onewireWrite( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t data )
{
     4a2:	9f 92       	push	r9
     4a4:	af 92       	push	r10
     4a6:	bf 92       	push	r11
     4a8:	cf 92       	push	r12
     4aa:	df 92       	push	r13
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	5c 01       	movw	r10, r24
     4ba:	6b 01       	movw	r12, r22
     4bc:	7a 01       	movw	r14, r20
     4be:	12 2f       	mov	r17, r18
     4c0:	d0 2f       	mov	r29, r16
	uint8_t sreg = SREG; //Store status register
     4c2:	9f b6       	in	r9, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Write byte in 8 single bit writes
     4c4:	c1 e0       	ldi	r28, 0x01	; 1
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <onewireWrite+0x38>
		onewireWriteBit( port, direction, portin, mask, data & i );
     4c8:	0c 2f       	mov	r16, r28
     4ca:	0d 23       	and	r16, r29
     4cc:	21 2f       	mov	r18, r17
     4ce:	a7 01       	movw	r20, r14
     4d0:	b6 01       	movw	r22, r12
     4d2:	c5 01       	movw	r24, r10
     4d4:	0e 94 1e 02 	call	0x43c	; 0x43c <onewireWriteBit>

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Write byte in 8 single bit writes
     4d8:	cc 0f       	add	r28, r28
     4da:	c1 11       	cpse	r28, r1
     4dc:	f5 cf       	rjmp	.-22     	; 0x4c8 <onewireWrite+0x26>
		onewireWriteBit( port, direction, portin, mask, data & i );

	SREG = sreg;
     4de:	9f be       	out	0x3f, r9	; 63
}
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	cf 90       	pop	r12
     4f0:	bf 90       	pop	r11
     4f2:	af 90       	pop	r10
     4f4:	9f 90       	pop	r9
     4f6:	08 95       	ret

000004f8 <onewireReadBit>:

//! Reads a bit from the 1wire bus
uint8_t onewireReadBit( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
     4f8:	dc 01       	movw	r26, r24
     4fa:	fb 01       	movw	r30, r22
	uint8_t bit = 0;
	uint8_t sreg = SREG;
     4fc:	3f b7       	in	r19, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	*port |= mask; //Write 1 to output
     4fe:	8c 91       	ld	r24, X
     500:	82 2b       	or	r24, r18
     502:	8c 93       	st	X, r24
	*direction |= mask;
     504:	80 81       	ld	r24, Z
     506:	82 2b       	or	r24, r18
     508:	80 83       	st	Z, r24
	*port &= ~mask; //Write 0 to output
     50a:	8c 91       	ld	r24, X
     50c:	92 2f       	mov	r25, r18
     50e:	90 95       	com	r25
     510:	89 23       	and	r24, r25
     512:	8c 93       	st	X, r24
     514:	8a e0       	ldi	r24, 0x0A	; 10
     516:	8a 95       	dec	r24
     518:	f1 f7       	brne	.-4      	; 0x516 <onewireReadBit+0x1e>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <onewireReadBit+0x24>
	_delay_us( 2 );
	*direction &= ~mask; //Set port to input
     51c:	80 81       	ld	r24, Z
     51e:	98 23       	and	r25, r24
     520:	90 83       	st	Z, r25
     522:	ea e1       	ldi	r30, 0x1A	; 26
     524:	ea 95       	dec	r30
     526:	f1 f7       	brne	.-4      	; 0x524 <onewireReadBit+0x2c>
     528:	00 c0       	rjmp	.+0      	; 0x52a <onewireReadBit+0x32>
	_delay_us( 5 );
	bit = ( ( *portin & mask ) != 0 ); //Read input
     52a:	fa 01       	movw	r30, r20
     52c:	80 81       	ld	r24, Z
     52e:	28 23       	and	r18, r24
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	09 f4       	brne	.+2      	; 0x536 <onewireReadBit+0x3e>
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	ef ee       	ldi	r30, 0xEF	; 239
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	31 97       	sbiw	r30, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <onewireReadBit+0x42>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <onewireReadBit+0x48>
     540:	00 00       	nop
	_delay_us( 60 );
	SREG = sreg;
     542:	3f bf       	out	0x3f, r19	; 63

	return bit;
}
     544:	08 95       	ret

00000546 <onewireRead>:

//! Reads a byte from the 1wire bus
uint8_t onewireRead( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
     546:	af 92       	push	r10
     548:	bf 92       	push	r11
     54a:	cf 92       	push	r12
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	5c 01       	movw	r10, r24
     55c:	6b 01       	movw	r12, r22
     55e:	7a 01       	movw	r14, r20
     560:	12 2f       	mov	r17, r18
	uint8_t sreg = SREG; //Store status register
     562:	0f b7       	in	r16, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Read byte in 8 single bit reads
     564:	c1 e0       	ldi	r28, 0x01	; 1

//! Reads a byte from the 1wire bus
uint8_t onewireRead( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
	uint8_t sreg = SREG; //Store status register
	uint8_t data = 0;
     566:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Read byte in 8 single bit reads
     568:	0b c0       	rjmp	.+22     	; 0x580 <onewireRead+0x3a>
		data |= onewireReadBit( port, direction, portin, mask ) * i;
     56a:	21 2f       	mov	r18, r17
     56c:	a7 01       	movw	r20, r14
     56e:	b6 01       	movw	r22, r12
     570:	c5 01       	movw	r24, r10
     572:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <onewireReadBit>
     576:	8c 9f       	mul	r24, r28
     578:	c0 01       	movw	r24, r0
     57a:	11 24       	eor	r1, r1
     57c:	d8 2b       	or	r29, r24

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Read byte in 8 single bit reads
     57e:	cc 0f       	add	r28, r28
     580:	c1 11       	cpse	r28, r1
     582:	f3 cf       	rjmp	.-26     	; 0x56a <onewireRead+0x24>
		data |= onewireReadBit( port, direction, portin, mask ) * i;

	SREG = sreg;
     584:	0f bf       	out	0x3f, r16	; 63

	return data;
}
     586:	8d 2f       	mov	r24, r29
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	df 90       	pop	r13
     596:	cf 90       	pop	r12
     598:	bf 90       	pop	r11
     59a:	af 90       	pop	r10
     59c:	08 95       	ret

0000059e <S7_INIT>:
#include "Segment7.h"

void S7_INIT(void)
{
	//Data pin initialization
	DIO_SetPinDir(S7_DATA_PORT, S7_DATA_PIN0, DIO_PIN_OUT);
     59e:	4f ef       	ldi	r20, 0xFF	; 255
     5a0:	64 e0       	ldi	r22, 0x04	; 4
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
	DIO_SetPinDir(S7_DATA_PORT, S7_DATA_PIN1, DIO_PIN_OUT);
     5a8:	4f ef       	ldi	r20, 0xFF	; 255
     5aa:	65 e0       	ldi	r22, 0x05	; 5
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
	DIO_SetPinDir(S7_DATA_PORT, S7_DATA_PIN2, DIO_PIN_OUT);
     5b2:	4f ef       	ldi	r20, 0xFF	; 255
     5b4:	66 e0       	ldi	r22, 0x06	; 6
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
	DIO_SetPinDir(S7_DATA_PORT, S7_DATA_PIN3, DIO_PIN_OUT);
     5bc:	4f ef       	ldi	r20, 0xFF	; 255
     5be:	67 e0       	ldi	r22, 0x07	; 7
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
	
	//Command pins initialization
	DIO_SetPinDir(S7_CMD_PORT, S7_DATA_PIN1, DIO_PIN_OUT);	
     5c6:	4f ef       	ldi	r20, 0xFF	; 255
     5c8:	65 e0       	ldi	r22, 0x05	; 5
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
	DIO_SetPinDir(S7_CMD_PORT, S7_DATA_PIN2, DIO_PIN_OUT);
     5d0:	4f ef       	ldi	r20, 0xFF	; 255
     5d2:	66 e0       	ldi	r22, 0x06	; 6
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
	
	//Output zeros to data pins
	DIO_SetPinVal(S7_DATA_PORT, S7_DATA_PIN0, DIO_PIN_OFF);
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	64 e0       	ldi	r22, 0x04	; 4
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
	DIO_SetPinVal(S7_DATA_PORT, S7_DATA_PIN1, DIO_PIN_OFF);	
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	65 e0       	ldi	r22, 0x05	; 5
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
	DIO_SetPinVal(S7_DATA_PORT, S7_DATA_PIN2, DIO_PIN_OFF);
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	66 e0       	ldi	r22, 0x06	; 6
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
	DIO_SetPinVal(S7_DATA_PORT, S7_DATA_PIN3, DIO_PIN_OFF);	
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	67 e0       	ldi	r22, 0x07	; 7
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
	
	//Output zeros to command pins
	DIO_SetPinVal(S7_CMD_PORT, S7_CMD_EN1, DIO_PIN_OFF);
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	62 e0       	ldi	r22, 0x02	; 2
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
	DIO_SetPinVal(S7_CMD_PORT, S7_CMD_EN2, DIO_PIN_OFF);
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
     616:	08 95       	ret

00000618 <BUTTON0_GetPinVal>:
#include "Button.h"
#define F_CPU 16000000
#include <util/delay.h>

Uint8 BUTTON0_GetPinVal(void)
{
     618:	cf 93       	push	r28
	Uint8 val = 0;
	val = DIO_GetPinVal(BUTTON0_PORT, BUTTON0_PIN);
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_GetPinVal>
     622:	c8 2f       	mov	r28, r24
	while(DIO_GetPinVal(BUTTON0_PORT, BUTTON0_PIN));
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_GetPinVal>
     62c:	81 11       	cpse	r24, r1
     62e:	fa cf       	rjmp	.-12     	; 0x624 <BUTTON0_GetPinVal+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     630:	2f ef       	ldi	r18, 0xFF	; 255
     632:	89 ef       	ldi	r24, 0xF9	; 249
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	21 50       	subi	r18, 0x01	; 1
     638:	80 40       	sbci	r24, 0x00	; 0
     63a:	90 40       	sbci	r25, 0x00	; 0
     63c:	e1 f7       	brne	.-8      	; 0x636 <BUTTON0_GetPinVal+0x1e>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <BUTTON0_GetPinVal+0x28>
     640:	00 00       	nop
	_delay_ms(20);
	return val;	
}
     642:	8c 2f       	mov	r24, r28
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <BUTTON1_GetPinVal>:
Uint8 BUTTON1_GetPinVal(void)
{
     648:	cf 93       	push	r28
	Uint8 val = 0;
	val = DIO_GetPinVal(BUTTON1_PORT, BUTTON1_PIN);
     64a:	66 e0       	ldi	r22, 0x06	; 6
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_GetPinVal>
     652:	c8 2f       	mov	r28, r24
	while(DIO_GetPinVal(BUTTON1_PORT, BUTTON1_PIN));
     654:	66 e0       	ldi	r22, 0x06	; 6
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_GetPinVal>
     65c:	81 11       	cpse	r24, r1
     65e:	fa cf       	rjmp	.-12     	; 0x654 <BUTTON1_GetPinVal+0xc>
     660:	2f ef       	ldi	r18, 0xFF	; 255
     662:	89 ef       	ldi	r24, 0xF9	; 249
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	21 50       	subi	r18, 0x01	; 1
     668:	80 40       	sbci	r24, 0x00	; 0
     66a:	90 40       	sbci	r25, 0x00	; 0
     66c:	e1 f7       	brne	.-8      	; 0x666 <BUTTON1_GetPinVal+0x1e>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <BUTTON1_GetPinVal+0x28>
     670:	00 00       	nop
	_delay_ms(20);
	return val;	
}
     672:	8c 2f       	mov	r24, r28
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <BUTTON2_GetPinVal>:
Uint8 BUTTON2_GetPinVal(void)
{
     678:	cf 93       	push	r28
	Uint8 val = 0;
	val = DIO_GetPinVal(BUTTON2_PORT, BUTTON2_PIN);
     67a:	62 e0       	ldi	r22, 0x02	; 2
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_GetPinVal>
     682:	c8 2f       	mov	r28, r24
	while(DIO_GetPinVal(BUTTON2_PORT, BUTTON2_PIN));
     684:	62 e0       	ldi	r22, 0x02	; 2
     686:	83 e0       	ldi	r24, 0x03	; 3
     688:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_GetPinVal>
     68c:	81 11       	cpse	r24, r1
     68e:	fa cf       	rjmp	.-12     	; 0x684 <BUTTON2_GetPinVal+0xc>
     690:	2f ef       	ldi	r18, 0xFF	; 255
     692:	89 ef       	ldi	r24, 0xF9	; 249
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	21 50       	subi	r18, 0x01	; 1
     698:	80 40       	sbci	r24, 0x00	; 0
     69a:	90 40       	sbci	r25, 0x00	; 0
     69c:	e1 f7       	brne	.-8      	; 0x696 <BUTTON2_GetPinVal+0x1e>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <BUTTON2_GetPinVal+0x28>
     6a0:	00 00       	nop
	_delay_ms(20);
	return val;	
}
     6a2:	8c 2f       	mov	r24, r28
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <DIO_SetPinDir>:
 */
#include "DIO.h"

void DIO_SetPinDir(Uint8 port, Uint8 pin, Uint8 dir)
{
	switch (dir)
     6a8:	44 23       	and	r20, r20
     6aa:	21 f0       	breq	.+8      	; 0x6b4 <DIO_SetPinDir+0xc>
     6ac:	4f 3f       	cpi	r20, 0xFF	; 255
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <DIO_SetPinDir+0xa>
     6b0:	4b c0       	rjmp	.+150    	; 0x748 <DIO_SetPinDir+0xa0>
     6b2:	08 95       	ret
	{
		case DIO_PIN_IN:
		if (pin >=0 && pin <=7)
     6b4:	68 30       	cpi	r22, 0x08	; 8
     6b6:	c0 f5       	brcc	.+112    	; 0x728 <DIO_SetPinDir+0x80>
		{
			switch (port)
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	91 f0       	breq	.+36     	; 0x6e0 <DIO_SetPinDir+0x38>
     6bc:	28 f0       	brcs	.+10     	; 0x6c8 <DIO_SetPinDir+0x20>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	d9 f0       	breq	.+54     	; 0x6f8 <DIO_SetPinDir+0x50>
     6c2:	83 30       	cpi	r24, 0x03	; 3
     6c4:	29 f1       	breq	.+74     	; 0x710 <DIO_SetPinDir+0x68>
     6c6:	08 95       	ret
			{
				case DIO_PORTA:
				Clear_Bit(DDRA, pin);
     6c8:	2a b3       	in	r18, 0x1a	; 26
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_SetPinDir+0x2c>
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	6a 95       	dec	r22
     6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_SetPinDir+0x28>
     6d8:	80 95       	com	r24
     6da:	82 23       	and	r24, r18
     6dc:	8a bb       	out	0x1a, r24	; 26
				break;
     6de:	08 95       	ret
				case DIO_PORTB:
				Clear_Bit(DDRB, pin);
     6e0:	27 b3       	in	r18, 0x17	; 23
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_SetPinDir+0x44>
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	6a 95       	dec	r22
     6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_SetPinDir+0x40>
     6f0:	80 95       	com	r24
     6f2:	82 23       	and	r24, r18
     6f4:	87 bb       	out	0x17, r24	; 23
				break;
     6f6:	08 95       	ret
				case DIO_PORTC:
				Clear_Bit(DDRC, pin);
     6f8:	24 b3       	in	r18, 0x14	; 20
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_SetPinDir+0x5c>
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	6a 95       	dec	r22
     706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_SetPinDir+0x58>
     708:	80 95       	com	r24
     70a:	82 23       	and	r24, r18
     70c:	84 bb       	out	0x14, r24	; 20
				break;
     70e:	08 95       	ret
				case DIO_PORTD:
				Clear_Bit(DDRD, pin);
     710:	21 b3       	in	r18, 0x11	; 17
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_SetPinDir+0x74>
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	6a 95       	dec	r22
     71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_SetPinDir+0x70>
     720:	80 95       	com	r24
     722:	82 23       	and	r24, r18
     724:	81 bb       	out	0x11, r24	; 17
				break;
     726:	08 95       	ret
				break;																
			}
		}
		else
		{
			switch (port)
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	41 f0       	breq	.+16     	; 0x73c <DIO_SetPinDir+0x94>
     72c:	28 f0       	brcs	.+10     	; 0x738 <DIO_SetPinDir+0x90>
     72e:	82 30       	cpi	r24, 0x02	; 2
     730:	39 f0       	breq	.+14     	; 0x740 <DIO_SetPinDir+0x98>
     732:	83 30       	cpi	r24, 0x03	; 3
     734:	39 f0       	breq	.+14     	; 0x744 <DIO_SetPinDir+0x9c>
     736:	08 95       	ret
			{
				case DIO_PORTA:
				DDRA = dir;
     738:	4a bb       	out	0x1a, r20	; 26
				break;
     73a:	08 95       	ret
				case DIO_PORTB:
				DDRB = dir;
     73c:	47 bb       	out	0x17, r20	; 23
				break;
     73e:	08 95       	ret
				case DIO_PORTC:
				DDRC = dir;
     740:	44 bb       	out	0x14, r20	; 20
				break;
     742:	08 95       	ret
				case DIO_PORTD:
				DDRD = dir;
     744:	41 bb       	out	0x11, r20	; 17
				break;
     746:	08 95       	ret
				break;																
			}
		}
		break;
		case DIO_PIN_OUT:
		if (pin >=0 && pin <=7)
     748:	68 30       	cpi	r22, 0x08	; 8
     74a:	a0 f5       	brcc	.+104    	; 0x7b4 <DIO_SetPinDir+0x10c>
		{
			switch (port)
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	89 f0       	breq	.+34     	; 0x772 <DIO_SetPinDir+0xca>
     750:	28 f0       	brcs	.+10     	; 0x75c <DIO_SetPinDir+0xb4>
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	c9 f0       	breq	.+50     	; 0x788 <DIO_SetPinDir+0xe0>
     756:	83 30       	cpi	r24, 0x03	; 3
     758:	11 f1       	breq	.+68     	; 0x79e <DIO_SetPinDir+0xf6>
     75a:	08 95       	ret
			{
				case DIO_PORTA:
				Set_Bit(DDRA, pin);
     75c:	2a b3       	in	r18, 0x1a	; 26
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_SetPinDir+0xc0>
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	6a 95       	dec	r22
     76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_SetPinDir+0xbc>
     76c:	82 2b       	or	r24, r18
     76e:	8a bb       	out	0x1a, r24	; 26
				break;
     770:	08 95       	ret
				case DIO_PORTB:
				Set_Bit(DDRB, pin);
     772:	27 b3       	in	r18, 0x17	; 23
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_SetPinDir+0xd6>
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	6a 95       	dec	r22
     780:	e2 f7       	brpl	.-8      	; 0x77a <DIO_SetPinDir+0xd2>
     782:	82 2b       	or	r24, r18
     784:	87 bb       	out	0x17, r24	; 23
				break;
     786:	08 95       	ret
				case DIO_PORTC:
				Set_Bit(DDRC, pin);
     788:	24 b3       	in	r18, 0x14	; 20
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_SetPinDir+0xec>
     790:	88 0f       	add	r24, r24
     792:	99 1f       	adc	r25, r25
     794:	6a 95       	dec	r22
     796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_SetPinDir+0xe8>
     798:	82 2b       	or	r24, r18
     79a:	84 bb       	out	0x14, r24	; 20
				break;
     79c:	08 95       	ret
				case DIO_PORTD:
				Set_Bit(DDRD, pin);
     79e:	21 b3       	in	r18, 0x11	; 17
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_SetPinDir+0x102>
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	6a 95       	dec	r22
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_SetPinDir+0xfe>
     7ae:	82 2b       	or	r24, r18
     7b0:	81 bb       	out	0x11, r24	; 17
				break;
     7b2:	08 95       	ret
				break;				
			}
		}
		else
		{
			switch (port)
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	41 f0       	breq	.+16     	; 0x7c8 <DIO_SetPinDir+0x120>
     7b8:	28 f0       	brcs	.+10     	; 0x7c4 <DIO_SetPinDir+0x11c>
     7ba:	82 30       	cpi	r24, 0x02	; 2
     7bc:	39 f0       	breq	.+14     	; 0x7cc <DIO_SetPinDir+0x124>
     7be:	83 30       	cpi	r24, 0x03	; 3
     7c0:	39 f0       	breq	.+14     	; 0x7d0 <DIO_SetPinDir+0x128>
     7c2:	08 95       	ret
			{
				case DIO_PORTA:
				DDRA = dir;
     7c4:	4a bb       	out	0x1a, r20	; 26
				break;
     7c6:	08 95       	ret
				case DIO_PORTB:
				DDRB = dir;
     7c8:	47 bb       	out	0x17, r20	; 23
				break;
     7ca:	08 95       	ret
				case DIO_PORTC:
				DDRC = dir;
     7cc:	44 bb       	out	0x14, r20	; 20
				break;
     7ce:	08 95       	ret
				case DIO_PORTD:
				DDRD = dir;
     7d0:	41 bb       	out	0x11, r20	; 17
     7d2:	08 95       	ret

000007d4 <DIO_SetPinVal>:
		default:   //MISRA C rules
		break;		
	}
}
void DIO_SetPinVal(Uint8 port, Uint8 pin, Uint8 val)
{
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	c8 2f       	mov	r28, r24
     7dc:	16 2f       	mov	r17, r22
     7de:	d4 2f       	mov	r29, r20
	switch (val)
     7e0:	44 23       	and	r20, r20
     7e2:	21 f0       	breq	.+8      	; 0x7ec <DIO_SetPinVal+0x18>
     7e4:	4f 3f       	cpi	r20, 0xFF	; 255
     7e6:	09 f4       	brne	.+2      	; 0x7ea <DIO_SetPinVal+0x16>
     7e8:	52 c0       	rjmp	.+164    	; 0x88e <__stack+0x2f>
     7ea:	9d c0       	rjmp	.+314    	; 0x926 <__stack+0xc7>
	{
		case DIO_PIN_OFF:
		if (pin >=0 && pin <=7)
     7ec:	68 30       	cpi	r22, 0x08	; 8
     7ee:	d8 f5       	brcc	.+118    	; 0x866 <__stack+0x7>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_OUT);
     7f0:	4f ef       	ldi	r20, 0xFF	; 255
     7f2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
			switch (port)
     7f6:	c1 30       	cpi	r28, 0x01	; 1
     7f8:	91 f0       	breq	.+36     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     7fa:	28 f0       	brcs	.+10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7fc:	c2 30       	cpi	r28, 0x02	; 2
     7fe:	d9 f0       	breq	.+54     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     800:	c3 30       	cpi	r28, 0x03	; 3
     802:	29 f1       	breq	.+74     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     804:	90 c0       	rjmp	.+288    	; 0x926 <__stack+0xc7>
			{
				case DIO_PORTA:
				Clear_Bit(PORTA, pin);
     806:	2b b3       	in	r18, 0x1b	; 27
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	1a 95       	dec	r17
     814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     816:	80 95       	com	r24
     818:	82 23       	and	r24, r18
     81a:	8b bb       	out	0x1b, r24	; 27
				break;
     81c:	84 c0       	rjmp	.+264    	; 0x926 <__stack+0xc7>
				case DIO_PORTB:
				Clear_Bit(PORTB, pin);
     81e:	28 b3       	in	r18, 0x18	; 24
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	1a 95       	dec	r17
     82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     82e:	80 95       	com	r24
     830:	82 23       	and	r24, r18
     832:	88 bb       	out	0x18, r24	; 24
				break;
     834:	78 c0       	rjmp	.+240    	; 0x926 <__stack+0xc7>
				case DIO_PORTC:
				Clear_Bit(PORTC, pin);
     836:	25 b3       	in	r18, 0x15	; 21
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	1a 95       	dec	r17
     844:	e2 f7       	brpl	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     846:	80 95       	com	r24
     848:	82 23       	and	r24, r18
     84a:	85 bb       	out	0x15, r24	; 21
				break;
     84c:	6c c0       	rjmp	.+216    	; 0x926 <__stack+0xc7>
				case DIO_PORTD:
				Clear_Bit(PORTD, pin);
     84e:	22 b3       	in	r18, 0x12	; 18
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	1a 95       	dec	r17
     85c:	e2 f7       	brpl	.-8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     85e:	80 95       	com	r24
     860:	82 23       	and	r24, r18
     862:	82 bb       	out	0x12, r24	; 18
				break;
     864:	60 c0       	rjmp	.+192    	; 0x926 <__stack+0xc7>
				break;				
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_OUT);
     866:	4f ef       	ldi	r20, 0xFF	; 255
     868:	68 e0       	ldi	r22, 0x08	; 8
     86a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
			switch (port)
     86e:	c1 30       	cpi	r28, 0x01	; 1
     870:	41 f0       	breq	.+16     	; 0x882 <__stack+0x23>
     872:	28 f0       	brcs	.+10     	; 0x87e <__stack+0x1f>
     874:	c2 30       	cpi	r28, 0x02	; 2
     876:	39 f0       	breq	.+14     	; 0x886 <__stack+0x27>
     878:	c3 30       	cpi	r28, 0x03	; 3
     87a:	39 f0       	breq	.+14     	; 0x88a <__stack+0x2b>
     87c:	54 c0       	rjmp	.+168    	; 0x926 <__stack+0xc7>
			{
				case DIO_PORTA:
				PORTA = val;
     87e:	db bb       	out	0x1b, r29	; 27
				break;
     880:	52 c0       	rjmp	.+164    	; 0x926 <__stack+0xc7>
				case DIO_PORTB:
				PORTB = val;
     882:	d8 bb       	out	0x18, r29	; 24
				break;
     884:	50 c0       	rjmp	.+160    	; 0x926 <__stack+0xc7>
				case DIO_PORTC:
				PORTC = val;
     886:	d5 bb       	out	0x15, r29	; 21
				break;
     888:	4e c0       	rjmp	.+156    	; 0x926 <__stack+0xc7>
				case DIO_PORTD:
				PORTD = val;
     88a:	d2 bb       	out	0x12, r29	; 18
				break;
     88c:	4c c0       	rjmp	.+152    	; 0x926 <__stack+0xc7>
				break;				
			}
		}
		break;
		case DIO_PIN_ON:
		if (pin >=0 && pin <=7)
     88e:	68 30       	cpi	r22, 0x08	; 8
     890:	b8 f5       	brcc	.+110    	; 0x900 <__stack+0xa1>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_OUT);
     892:	4f ef       	ldi	r20, 0xFF	; 255
     894:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
			switch (port)
     898:	c1 30       	cpi	r28, 0x01	; 1
     89a:	89 f0       	breq	.+34     	; 0x8be <__stack+0x5f>
     89c:	28 f0       	brcs	.+10     	; 0x8a8 <__stack+0x49>
     89e:	c2 30       	cpi	r28, 0x02	; 2
     8a0:	c9 f0       	breq	.+50     	; 0x8d4 <__stack+0x75>
     8a2:	c3 30       	cpi	r28, 0x03	; 3
     8a4:	11 f1       	breq	.+68     	; 0x8ea <__stack+0x8b>
     8a6:	3f c0       	rjmp	.+126    	; 0x926 <__stack+0xc7>
			{
				case DIO_PORTA:
				Set_Bit(PORTA, pin);
     8a8:	2b b3       	in	r18, 0x1b	; 27
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	1a 95       	dec	r17
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
     8b8:	82 2b       	or	r24, r18
     8ba:	8b bb       	out	0x1b, r24	; 27
				break;
     8bc:	34 c0       	rjmp	.+104    	; 0x926 <__stack+0xc7>
				case DIO_PORTB:
				Set_Bit(PORTB, pin);
     8be:	28 b3       	in	r18, 0x18	; 24
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__stack+0x6b>
     8c6:	88 0f       	add	r24, r24
     8c8:	99 1f       	adc	r25, r25
     8ca:	1a 95       	dec	r17
     8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <__stack+0x67>
     8ce:	82 2b       	or	r24, r18
     8d0:	88 bb       	out	0x18, r24	; 24
				break;
     8d2:	29 c0       	rjmp	.+82     	; 0x926 <__stack+0xc7>
				case DIO_PORTC:
				Set_Bit(PORTC, pin);
     8d4:	25 b3       	in	r18, 0x15	; 21
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__stack+0x81>
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	1a 95       	dec	r17
     8e2:	e2 f7       	brpl	.-8      	; 0x8dc <__stack+0x7d>
     8e4:	82 2b       	or	r24, r18
     8e6:	85 bb       	out	0x15, r24	; 21
				break;
     8e8:	1e c0       	rjmp	.+60     	; 0x926 <__stack+0xc7>
				case DIO_PORTD:
				Set_Bit(PORTD, pin);
     8ea:	22 b3       	in	r18, 0x12	; 18
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <__stack+0x97>
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	1a 95       	dec	r17
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <__stack+0x93>
     8fa:	82 2b       	or	r24, r18
     8fc:	82 bb       	out	0x12, r24	; 18
				break;
     8fe:	13 c0       	rjmp	.+38     	; 0x926 <__stack+0xc7>
				break;				
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_OUT);
     900:	4f ef       	ldi	r20, 0xFF	; 255
     902:	68 e0       	ldi	r22, 0x08	; 8
     904:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
			switch (port)
     908:	c1 30       	cpi	r28, 0x01	; 1
     90a:	41 f0       	breq	.+16     	; 0x91c <__stack+0xbd>
     90c:	28 f0       	brcs	.+10     	; 0x918 <__stack+0xb9>
     90e:	c2 30       	cpi	r28, 0x02	; 2
     910:	39 f0       	breq	.+14     	; 0x920 <__stack+0xc1>
     912:	c3 30       	cpi	r28, 0x03	; 3
     914:	39 f0       	breq	.+14     	; 0x924 <__stack+0xc5>
     916:	07 c0       	rjmp	.+14     	; 0x926 <__stack+0xc7>
			{
				case DIO_PORTA:
				PORTA = val;
     918:	db bb       	out	0x1b, r29	; 27
				break;
     91a:	05 c0       	rjmp	.+10     	; 0x926 <__stack+0xc7>
				case DIO_PORTB:
				PORTB = val;
     91c:	d8 bb       	out	0x18, r29	; 24
				break;
     91e:	03 c0       	rjmp	.+6      	; 0x926 <__stack+0xc7>
				case DIO_PORTC:
				PORTC = val;
     920:	d5 bb       	out	0x15, r29	; 21
				break;
     922:	01 c0       	rjmp	.+2      	; 0x926 <__stack+0xc7>
				case DIO_PORTD:
				PORTD = val;
     924:	d2 bb       	out	0x12, r29	; 18
		}
		break;
		default:   //MISRA C rules
		break;		
	}	
}
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	08 95       	ret

0000092e <DIO_TogglePin>:
void DIO_TogglePin(Uint8 port, Uint8 pin)
{
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	c8 2f       	mov	r28, r24
     934:	d6 2f       	mov	r29, r22
	if (pin >=0 && pin <=7)
     936:	68 30       	cpi	r22, 0x08	; 8
     938:	b8 f5       	brcc	.+110    	; 0x9a8 <DIO_TogglePin+0x7a>
	{
		DIO_SetPinDir(port, pin, DIO_PIN_OUT);
     93a:	4f ef       	ldi	r20, 0xFF	; 255
     93c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
		switch (port)
     940:	c1 30       	cpi	r28, 0x01	; 1
     942:	89 f0       	breq	.+34     	; 0x966 <DIO_TogglePin+0x38>
     944:	28 f0       	brcs	.+10     	; 0x950 <DIO_TogglePin+0x22>
     946:	c2 30       	cpi	r28, 0x02	; 2
     948:	c9 f0       	breq	.+50     	; 0x97c <DIO_TogglePin+0x4e>
     94a:	c3 30       	cpi	r28, 0x03	; 3
     94c:	11 f1       	breq	.+68     	; 0x992 <DIO_TogglePin+0x64>
     94e:	47 c0       	rjmp	.+142    	; 0x9de <DIO_TogglePin+0xb0>
		{
			case DIO_PORTA:
			Toggle_Bit(PORTA, pin);
     950:	2b b3       	in	r18, 0x1b	; 27
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_TogglePin+0x2e>
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	da 95       	dec	r29
     95e:	e2 f7       	brpl	.-8      	; 0x958 <DIO_TogglePin+0x2a>
     960:	82 27       	eor	r24, r18
     962:	8b bb       	out	0x1b, r24	; 27
			break;
     964:	3c c0       	rjmp	.+120    	; 0x9de <DIO_TogglePin+0xb0>
			case DIO_PORTB:
			Toggle_Bit(PORTB, pin);
     966:	28 b3       	in	r18, 0x18	; 24
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	02 c0       	rjmp	.+4      	; 0x972 <DIO_TogglePin+0x44>
     96e:	88 0f       	add	r24, r24
     970:	99 1f       	adc	r25, r25
     972:	da 95       	dec	r29
     974:	e2 f7       	brpl	.-8      	; 0x96e <DIO_TogglePin+0x40>
     976:	82 27       	eor	r24, r18
     978:	88 bb       	out	0x18, r24	; 24
			break;
     97a:	31 c0       	rjmp	.+98     	; 0x9de <DIO_TogglePin+0xb0>
			case DIO_PORTC:
			Toggle_Bit(PORTC, pin);
     97c:	25 b3       	in	r18, 0x15	; 21
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	02 c0       	rjmp	.+4      	; 0x988 <DIO_TogglePin+0x5a>
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	da 95       	dec	r29
     98a:	e2 f7       	brpl	.-8      	; 0x984 <DIO_TogglePin+0x56>
     98c:	82 27       	eor	r24, r18
     98e:	85 bb       	out	0x15, r24	; 21
			break;
     990:	26 c0       	rjmp	.+76     	; 0x9de <DIO_TogglePin+0xb0>
			case DIO_PORTD:
			Toggle_Bit(PORTD, pin);
     992:	22 b3       	in	r18, 0x12	; 18
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	02 c0       	rjmp	.+4      	; 0x99e <DIO_TogglePin+0x70>
     99a:	88 0f       	add	r24, r24
     99c:	99 1f       	adc	r25, r25
     99e:	da 95       	dec	r29
     9a0:	e2 f7       	brpl	.-8      	; 0x99a <DIO_TogglePin+0x6c>
     9a2:	82 27       	eor	r24, r18
     9a4:	82 bb       	out	0x12, r24	; 18
			break;	
     9a6:	1b c0       	rjmp	.+54     	; 0x9de <DIO_TogglePin+0xb0>
			break;											
		}
	}
	else
	{
		DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_OUT);
     9a8:	4f ef       	ldi	r20, 0xFF	; 255
     9aa:	68 e0       	ldi	r22, 0x08	; 8
     9ac:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
		switch (port)
     9b0:	c1 30       	cpi	r28, 0x01	; 1
     9b2:	51 f0       	breq	.+20     	; 0x9c8 <DIO_TogglePin+0x9a>
     9b4:	28 f0       	brcs	.+10     	; 0x9c0 <DIO_TogglePin+0x92>
     9b6:	c2 30       	cpi	r28, 0x02	; 2
     9b8:	59 f0       	breq	.+22     	; 0x9d0 <DIO_TogglePin+0xa2>
     9ba:	c3 30       	cpi	r28, 0x03	; 3
     9bc:	69 f0       	breq	.+26     	; 0x9d8 <DIO_TogglePin+0xaa>
     9be:	0f c0       	rjmp	.+30     	; 0x9de <DIO_TogglePin+0xb0>
		{
			case DIO_PORTA:
			PORTA ^= 0xff;
     9c0:	8b b3       	in	r24, 0x1b	; 27
     9c2:	80 95       	com	r24
     9c4:	8b bb       	out	0x1b, r24	; 27
			break;
     9c6:	0b c0       	rjmp	.+22     	; 0x9de <DIO_TogglePin+0xb0>
			case DIO_PORTB:
			PORTB ^= 0xff;
     9c8:	88 b3       	in	r24, 0x18	; 24
     9ca:	80 95       	com	r24
     9cc:	88 bb       	out	0x18, r24	; 24
			break;
     9ce:	07 c0       	rjmp	.+14     	; 0x9de <DIO_TogglePin+0xb0>
			case DIO_PORTC:
			PORTC ^= 0xff;
     9d0:	85 b3       	in	r24, 0x15	; 21
     9d2:	80 95       	com	r24
     9d4:	85 bb       	out	0x15, r24	; 21
			break;
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <DIO_TogglePin+0xb0>
			case DIO_PORTD:
			PORTD ^= 0xff;
     9d8:	82 b3       	in	r24, 0x12	; 18
     9da:	80 95       	com	r24
     9dc:	82 bb       	out	0x12, r24	; 18
			break;		
			default:   //MISRA C rules
			break;										
		}	
	}
}
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	08 95       	ret

000009e4 <DIO_GetPinVal>:
Uint8 DIO_GetPinVal(Uint8 port, Uint8 pin)
{
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	c8 2f       	mov	r28, r24
     9ea:	d6 2f       	mov	r29, r22
	Uint8 val = 0;
		if (pin >=0 && pin <=7)
     9ec:	68 30       	cpi	r22, 0x08	; 8
     9ee:	78 f5       	brcc	.+94     	; 0xa4e <DIO_GetPinVal+0x6a>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_IN);
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
			switch (port)
     9f6:	c1 30       	cpi	r28, 0x01	; 1
     9f8:	79 f0       	breq	.+30     	; 0xa18 <DIO_GetPinVal+0x34>
     9fa:	28 f0       	brcs	.+10     	; 0xa06 <DIO_GetPinVal+0x22>
     9fc:	c2 30       	cpi	r28, 0x02	; 2
     9fe:	a9 f0       	breq	.+42     	; 0xa2a <DIO_GetPinVal+0x46>
     a00:	c3 30       	cpi	r28, 0x03	; 3
     a02:	e1 f0       	breq	.+56     	; 0xa3c <DIO_GetPinVal+0x58>
     a04:	38 c0       	rjmp	.+112    	; 0xa76 <DIO_GetPinVal+0x92>
			{
				case DIO_PORTA:
				val = Get_Bit(PINA, pin);
     a06:	89 b3       	in	r24, 0x19	; 25
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <DIO_GetPinVal+0x2c>
     a0c:	95 95       	asr	r25
     a0e:	87 95       	ror	r24
     a10:	da 95       	dec	r29
     a12:	e2 f7       	brpl	.-8      	; 0xa0c <DIO_GetPinVal+0x28>
     a14:	81 70       	andi	r24, 0x01	; 1
				break;
     a16:	32 c0       	rjmp	.+100    	; 0xa7c <DIO_GetPinVal+0x98>
				case DIO_PORTB:
				val = Get_Bit(PINB, pin);
     a18:	86 b3       	in	r24, 0x16	; 22
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <DIO_GetPinVal+0x3e>
     a1e:	95 95       	asr	r25
     a20:	87 95       	ror	r24
     a22:	da 95       	dec	r29
     a24:	e2 f7       	brpl	.-8      	; 0xa1e <DIO_GetPinVal+0x3a>
     a26:	81 70       	andi	r24, 0x01	; 1
				break;
     a28:	29 c0       	rjmp	.+82     	; 0xa7c <DIO_GetPinVal+0x98>
				case DIO_PORTC:
				val = Get_Bit(PINC, pin);
     a2a:	83 b3       	in	r24, 0x13	; 19
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <DIO_GetPinVal+0x50>
     a30:	95 95       	asr	r25
     a32:	87 95       	ror	r24
     a34:	da 95       	dec	r29
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <DIO_GetPinVal+0x4c>
     a38:	81 70       	andi	r24, 0x01	; 1
				break;
     a3a:	20 c0       	rjmp	.+64     	; 0xa7c <DIO_GetPinVal+0x98>
				case DIO_PORTD:
				val = Get_Bit(PIND, pin);
     a3c:	80 b3       	in	r24, 0x10	; 16
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <DIO_GetPinVal+0x62>
     a42:	95 95       	asr	r25
     a44:	87 95       	ror	r24
     a46:	da 95       	dec	r29
     a48:	e2 f7       	brpl	.-8      	; 0xa42 <DIO_GetPinVal+0x5e>
     a4a:	81 70       	andi	r24, 0x01	; 1
				break;
     a4c:	17 c0       	rjmp	.+46     	; 0xa7c <DIO_GetPinVal+0x98>
				break;				
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_IN);
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	68 e0       	ldi	r22, 0x08	; 8
     a52:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_SetPinDir>
			switch (port)
     a56:	c1 30       	cpi	r28, 0x01	; 1
     a58:	41 f0       	breq	.+16     	; 0xa6a <DIO_GetPinVal+0x86>
     a5a:	28 f0       	brcs	.+10     	; 0xa66 <DIO_GetPinVal+0x82>
     a5c:	c2 30       	cpi	r28, 0x02	; 2
     a5e:	39 f0       	breq	.+14     	; 0xa6e <DIO_GetPinVal+0x8a>
     a60:	c3 30       	cpi	r28, 0x03	; 3
     a62:	39 f0       	breq	.+14     	; 0xa72 <DIO_GetPinVal+0x8e>
     a64:	0a c0       	rjmp	.+20     	; 0xa7a <DIO_GetPinVal+0x96>
			{
				case DIO_PORTA:
				val = PINA;
     a66:	89 b3       	in	r24, 0x19	; 25
				break;
     a68:	09 c0       	rjmp	.+18     	; 0xa7c <DIO_GetPinVal+0x98>
				case DIO_PORTB:
				val = PINB;
     a6a:	86 b3       	in	r24, 0x16	; 22
				break;
     a6c:	07 c0       	rjmp	.+14     	; 0xa7c <DIO_GetPinVal+0x98>
				case DIO_PORTC:
				val = PINC;
     a6e:	83 b3       	in	r24, 0x13	; 19
				break;
     a70:	05 c0       	rjmp	.+10     	; 0xa7c <DIO_GetPinVal+0x98>
				case DIO_PORTD:
				val = PIND;
     a72:	80 b3       	in	r24, 0x10	; 16
				break;
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <DIO_GetPinVal+0x98>
		}	
	}
}
Uint8 DIO_GetPinVal(Uint8 port, Uint8 pin)
{
	Uint8 val = 0;
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <DIO_GetPinVal+0x98>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
				default:   //MISRA C rules
				break;				
			}
		}
	return val;
}
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <LED0_ON>:
	DIO_TogglePin(LED0_PORT, LED0_PIN);
}

void LED1_ON(void)
{
	DIO_SetPinVal(LED1_PORT, LED1_PIN, DIO_PIN_ON);
     a82:	4f ef       	ldi	r20, 0xFF	; 255
     a84:	62 e0       	ldi	r22, 0x02	; 2
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
     a8c:	08 95       	ret

00000a8e <LED0_OFF>:
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	62 e0       	ldi	r22, 0x02	; 2
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
     a98:	08 95       	ret

00000a9a <LED1_OFF>:
}
void LED1_OFF(void)
{
	DIO_SetPinVal(LED1_PORT, LED1_PIN, DIO_PIN_OFF);
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	67 e0       	ldi	r22, 0x07	; 7
     a9e:	82 e0       	ldi	r24, 0x02	; 2
     aa0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
     aa4:	08 95       	ret

00000aa6 <main>:

extern int T2_OVF_count_1; // counter of ISR of Timer 2 which by its value we can
                           // control when the functions in ISR will be implemented

int main(void)
{
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	64 97       	sbiw	r28, 0x14	; 20
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	cd bf       	out	0x3d, r28	; 61
	//Setting control pins of Heating/Cooling elements to Zero volt
	DIO_SetPinVal(DIO_PORTC, DIO_PIN_3, DIO_PIN_OFF);
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	63 e0       	ldi	r22, 0x03	; 3
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
	DIO_SetPinVal(DIO_PORTC, DIO_PIN_4, DIO_PIN_OFF);
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	64 e0       	ldi	r22, 0x04	; 4
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
	LED0_OFF();
     ace:	0e 94 47 05 	call	0xa8e	; 0xa8e <LED0_OFF>
	
	// Initializations of drivers & peripherals
	S7_INIT();
     ad2:	0e 94 cf 02 	call	0x59e	; 0x59e <S7_INIT>
	EEPROM_INIT();
     ad6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <EEPROM_INIT>
	
 	TIMER0_INIT();
     ada:	0e 94 13 07 	call	0xe26	; 0xe26 <TIMER0_INIT>
 	TIMER0_SetDelay(10);
     ade:	6a e0       	ldi	r22, 0x0A	; 10
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 25 07 	call	0xe4a	; 0xe4a <TIMER0_SetDelay>
 	TIMER0_Start();
     aea:	0e 94 20 07 	call	0xe40	; 0xe40 <TIMER0_Start>
	
	TIMER2_INIT();
     aee:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <TIMER2_INIT>
	TIMER2_SetDelay(100);
     af2:	64 e6       	ldi	r22, 0x64	; 100
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <TIMER2_SetDelay>
	Uint8 Average_Temp = 0; // variable to store the average value of the last 10 reads from DS18B20
	
	Uint8 EEPROM_data_Add = 0X20; // Address of the byte of EEPROM that we access
	                              // to set and to read the set desired temp in it
	Uint8 EEPROM_page = 1;        // page of EEPROM that we want to store our desired temp in it
	Uint8 Desired_Temp = EEPROM_ReadByte(EEPROM_page, EEPROM_data_Add); // variable to store the read temp from EEPROM
     afe:	60 e2       	ldi	r22, 0x20	; 32
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	0e 94 80 01 	call	0x300	; 0x300 <EEPROM_ReadByte>
     b06:	d8 2e       	mov	r13, r24
					  // for setting display mode.
	
	int Temp_Convert_Count = 0; // the pointer of the array that will contains the 10 last reads from DS18B20
	int Temp_buffer_Array[10]; // Array consists of 10 elements to store the last 10 reads of DS18B20
	int Temp_Sum = 0;       // variable to store the sum of the last 10 reads from DS18B20
	Uint8 Average_Temp = 0; // variable to store the average value of the last 10 reads from DS18B20
     b08:	c1 2c       	mov	r12, r1
	Uint8 Mode_A = 0; // Two variables to control once we are in a Mode, only 
	Uint8 Mode_B = 0; // a couple of functions to be executed once, not for every time
	                  // the loop will execute. Mode_A for temp display mode, & Mode_B
					  // for setting display mode.
	
	int Temp_Convert_Count = 0; // the pointer of the array that will contains the 10 last reads from DS18B20
     b0a:	81 2c       	mov	r8, r1
     b0c:	91 2c       	mov	r9, r1
	TIMER2_SetDelay(100);
	
	Uint8 d;
	
	Uint8 Mode_A = 0; // Two variables to control once we are in a Mode, only 
	Uint8 Mode_B = 0; // a couple of functions to be executed once, not for every time
     b0e:	a1 2c       	mov	r10, r1
	TIMER2_INIT();
	TIMER2_SetDelay(100);
	
	Uint8 d;
	
	Uint8 Mode_A = 0; // Two variables to control once we are in a Mode, only 
     b10:	b1 2c       	mov	r11, r1
	                                                                    // based on the page and the address of the location we want to access
	
    /* Replace with your application code */
    while (1) 
    {
		counter = BUTTON2_GetPinVal() == 1? ++counter : counter;  
     b12:	0e 94 3c 03 	call	0x678	; 0x678 <BUTTON2_GetPinVal>
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	21 f4       	brne	.+8      	; 0xb22 <main+0x7c>
     b1a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <counter>
     b1e:	8f 5f       	subi	r24, 0xFF	; 255
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <main+0x80>
     b22:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <counter>
     b26:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <counter>
		
		if (counter % 2)  // Odd value (ON Mode)
     b2a:	80 ff       	sbrs	r24, 0
     b2c:	66 c1       	rjmp	.+716    	; 0xdfa <main+0x354>
		{
			if (Mode_Selector)  // Temperature Display Mode
     b2e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Mode_Selector>
     b32:	88 23       	and	r24, r24
     b34:	09 f4       	brne	.+2      	; 0xb38 <main+0x92>
     b36:	e1 c0       	rjmp	.+450    	; 0xcfa <main+0x254>
			{
				if (Mode_A == 0) // one time executed block
     b38:	b1 10       	cpse	r11, r1
     b3a:	0b c0       	rjmp	.+22     	; 0xb52 <main+0xac>
				{
					Mode_A = 1;
					Mode_B = 0;
					Task_Timer_Switch = 1;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Task_Timer_Switch>
					S7_Blinker = 2;
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					TIMER0_Start();
     b48:	0e 94 20 07 	call	0xe40	; 0xe40 <TIMER0_Start>
			if (Mode_Selector)  // Temperature Display Mode
			{
				if (Mode_A == 0) // one time executed block
				{
					Mode_A = 1;
					Mode_B = 0;
     b4c:	a1 2c       	mov	r10, r1
		{
			if (Mode_Selector)  // Temperature Display Mode
			{
				if (Mode_A == 0) // one time executed block
				{
					Mode_A = 1;
     b4e:	bb 24       	eor	r11, r11
     b50:	b3 94       	inc	r11
					Task_Timer_Switch = 1;
					S7_Blinker = 2;
					TIMER0_Start();
				}
				//Start conversion (without ROM matching)
				ds18b20convert( &PORTA, &DDRA, &PINA, ( 1 << 0 ), NULL );
     b52:	00 e0       	ldi	r16, 0x00	; 0
     b54:	10 e0       	ldi	r17, 0x00	; 0
     b56:	21 e0       	ldi	r18, 0x01	; 1
     b58:	49 e3       	ldi	r20, 0x39	; 57
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	6a e3       	ldi	r22, 0x3A	; 58
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	8b e3       	ldi	r24, 0x3B	; 59
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 98 00 	call	0x130	; 0x130 <ds18b20convert>
     b68:	2f ef       	ldi	r18, 0xFF	; 255
     b6a:	41 ee       	ldi	r20, 0xE1	; 225
     b6c:	54 e0       	ldi	r21, 0x04	; 4
     b6e:	21 50       	subi	r18, 0x01	; 1
     b70:	40 40       	sbci	r20, 0x00	; 0
     b72:	50 40       	sbci	r21, 0x00	; 0
     b74:	e1 f7       	brne	.-8      	; 0xb6e <main+0xc8>
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <main+0xd2>
     b78:	00 00       	nop
				//Delay (sensor needs time to perform conversion)
				_delay_ms( 100 );

				//Read temperature (without ROM matching)
				ds18b20read( &PORTA, &DDRA, &PINA, ( 1 << 0 ), NULL, &temp );
     b7a:	0f 2e       	mov	r0, r31
     b7c:	f0 e7       	ldi	r31, 0x70	; 112
     b7e:	ef 2e       	mov	r14, r31
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	ff 2e       	mov	r15, r31
     b84:	f0 2d       	mov	r31, r0
     b86:	21 e0       	ldi	r18, 0x01	; 1
     b88:	49 e3       	ldi	r20, 0x39	; 57
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	6a e3       	ldi	r22, 0x3A	; 58
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	8b e3       	ldi	r24, 0x3B	; 59
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 1d 01 	call	0x23a	; 0x23a <ds18b20read>
				//Somehow use data stored in `temp` variable
				
				
				Temp_buffer_Array[Temp_Convert_Count] = temp; // store the current temp in the pointed element of
     b98:	f4 01       	movw	r30, r8
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	8c 0f       	add	r24, r28
     ba4:	9d 1f       	adc	r25, r29
     ba6:	e8 0f       	add	r30, r24
     ba8:	f9 1f       	adc	r31, r25
     baa:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
     bae:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
     bb2:	91 83       	std	Z+1, r25	; 0x01
     bb4:	80 83       	st	Z, r24
				                                              // Temp_buffer_Array array based on the pointer
															  // Temp_Convert_Count
				
				Temp_Convert_Count++; // pointer of Temp_buffer_Array array
     bb6:	9f ef       	ldi	r25, 0xFF	; 255
     bb8:	89 1a       	sub	r8, r25
     bba:	99 0a       	sbc	r9, r25
				
				if (Temp_Convert_Count >= 10)
     bbc:	2a e0       	ldi	r18, 0x0A	; 10
     bbe:	82 16       	cp	r8, r18
     bc0:	91 04       	cpc	r9, r1
     bc2:	0c f4       	brge	.+2      	; 0xbc6 <main+0x120>
     bc4:	5f c0       	rjmp	.+190    	; 0xc84 <main+0x1de>
				{
					Temp_Convert_Count = 9; // Back pointer to the last element of array
					
					//calculate the sum of all 10 converted temp reads
					Temp_Sum = Temp_buffer_Array[0] + Temp_buffer_Array[1] + Temp_buffer_Array[2] + Temp_buffer_Array[3] + Temp_buffer_Array[4] + Temp_buffer_Array[5] + Temp_buffer_Array[6] + Temp_buffer_Array[7] + Temp_buffer_Array[8] + Temp_buffer_Array[9];
     bc6:	29 81       	ldd	r18, Y+1	; 0x01
     bc8:	3a 81       	ldd	r19, Y+2	; 0x02
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	82 0f       	add	r24, r18
     bd0:	93 1f       	adc	r25, r19
     bd2:	2d 81       	ldd	r18, Y+5	; 0x05
     bd4:	3e 81       	ldd	r19, Y+6	; 0x06
     bd6:	82 0f       	add	r24, r18
     bd8:	93 1f       	adc	r25, r19
     bda:	2f 81       	ldd	r18, Y+7	; 0x07
     bdc:	38 85       	ldd	r19, Y+8	; 0x08
     bde:	82 0f       	add	r24, r18
     be0:	93 1f       	adc	r25, r19
     be2:	29 85       	ldd	r18, Y+9	; 0x09
     be4:	3a 85       	ldd	r19, Y+10	; 0x0a
     be6:	82 0f       	add	r24, r18
     be8:	93 1f       	adc	r25, r19
     bea:	2b 85       	ldd	r18, Y+11	; 0x0b
     bec:	3c 85       	ldd	r19, Y+12	; 0x0c
     bee:	82 0f       	add	r24, r18
     bf0:	93 1f       	adc	r25, r19
     bf2:	2d 85       	ldd	r18, Y+13	; 0x0d
     bf4:	3e 85       	ldd	r19, Y+14	; 0x0e
     bf6:	82 0f       	add	r24, r18
     bf8:	93 1f       	adc	r25, r19
     bfa:	2f 85       	ldd	r18, Y+15	; 0x0f
     bfc:	38 89       	ldd	r19, Y+16	; 0x10
     bfe:	82 0f       	add	r24, r18
     c00:	93 1f       	adc	r25, r19
     c02:	29 89       	ldd	r18, Y+17	; 0x11
     c04:	3a 89       	ldd	r19, Y+18	; 0x12
     c06:	82 0f       	add	r24, r18
     c08:	93 1f       	adc	r25, r19
     c0a:	2b 89       	ldd	r18, Y+19	; 0x13
     c0c:	3c 89       	ldd	r19, Y+20	; 0x14
     c0e:	82 0f       	add	r24, r18
     c10:	93 1f       	adc	r25, r19
					
					Average_Temp = (Uint8) (Temp_Sum / 10); // Average temp of 10 temp reads
     c12:	6a e0       	ldi	r22, 0x0A	; 10
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divmodhi4>
     c1a:	c6 2e       	mov	r12, r22
					
					Ones = Average_Temp % 10;
     c1c:	8d ec       	ldi	r24, 0xCD	; 205
     c1e:	68 9f       	mul	r22, r24
     c20:	81 2d       	mov	r24, r1
     c22:	11 24       	eor	r1, r1
     c24:	86 95       	lsr	r24
     c26:	86 95       	lsr	r24
     c28:	86 95       	lsr	r24
     c2a:	28 2f       	mov	r18, r24
     c2c:	22 0f       	add	r18, r18
     c2e:	92 2f       	mov	r25, r18
     c30:	99 0f       	add	r25, r25
     c32:	99 0f       	add	r25, r25
     c34:	92 0f       	add	r25, r18
     c36:	69 1b       	sub	r22, r25
     c38:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <Ones>
					Tens = Average_Temp / 10;			
     c3c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Tens>
					
					// loop to swap elements of array
					for (d = 0; d < 9; d++)
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	19 c0       	rjmp	.+50     	; 0xc76 <main+0x1d0>
					{
						Temp_buffer_Array[d] = Temp_buffer_Array[d+1];
     c44:	82 2f       	mov	r24, r18
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	fc 01       	movw	r30, r24
     c4a:	31 96       	adiw	r30, 0x01	; 1
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	41 e0       	ldi	r20, 0x01	; 1
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	4c 0f       	add	r20, r28
     c56:	5d 1f       	adc	r21, r29
     c58:	e4 0f       	add	r30, r20
     c5a:	f5 1f       	adc	r31, r21
     c5c:	40 81       	ld	r20, Z
     c5e:	51 81       	ldd	r21, Z+1	; 0x01
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	e1 e0       	ldi	r30, 0x01	; 1
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	ec 0f       	add	r30, r28
     c6a:	fd 1f       	adc	r31, r29
     c6c:	e8 0f       	add	r30, r24
     c6e:	f9 1f       	adc	r31, r25
     c70:	51 83       	std	Z+1, r21	; 0x01
     c72:	40 83       	st	Z, r20
					
					Ones = Average_Temp % 10;
					Tens = Average_Temp / 10;			
					
					// loop to swap elements of array
					for (d = 0; d < 9; d++)
     c74:	2f 5f       	subi	r18, 0xFF	; 255
     c76:	29 30       	cpi	r18, 0x09	; 9
     c78:	28 f3       	brcs	.-54     	; 0xc44 <main+0x19e>
				
				Temp_Convert_Count++; // pointer of Temp_buffer_Array array
				
				if (Temp_Convert_Count >= 10)
				{
					Temp_Convert_Count = 9; // Back pointer to the last element of array
     c7a:	0f 2e       	mov	r0, r31
     c7c:	f9 e0       	ldi	r31, 0x09	; 9
     c7e:	8f 2e       	mov	r8, r31
     c80:	91 2c       	mov	r9, r1
     c82:	f0 2d       	mov	r31, r0
					{
						Temp_buffer_Array[d] = Temp_buffer_Array[d+1];
					}					
				}		
				
				if (Desired_Temp > Average_Temp) // conditions to control when to turn heating/ cooling element on/ off
     c84:	cd 14       	cp	r12, r13
     c86:	68 f4       	brcc	.+26     	; 0xca2 <main+0x1fc>
				{                                   
					TIMER2_Start();
     c88:	0e 94 ef 09 	call	0x13de	; 0x13de <TIMER2_Start>
					DIO_SetPinVal(DIO_PORTC, DIO_PIN_3, DIO_PIN_OFF);
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	63 e0       	ldi	r22, 0x03	; 3
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
					DIO_SetPinVal(DIO_PORTC, DIO_PIN_4, DIO_PIN_ON);
     c96:	4f ef       	ldi	r20, 0xFF	; 255
     c98:	64 e0       	ldi	r22, 0x04	; 4
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
     ca0:	21 c0       	rjmp	.+66     	; 0xce4 <main+0x23e>
					
				}
				else if (Desired_Temp < Average_Temp)
     ca2:	dc 14       	cp	r13, r12
     ca4:	78 f4       	brcc	.+30     	; 0xcc4 <main+0x21e>
				{
					TIMER2_Stop();
     ca6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <TIMER2_Stop>
					DIO_SetPinVal(DIO_PORTC, DIO_PIN_3, DIO_PIN_ON);
     caa:	4f ef       	ldi	r20, 0xFF	; 255
     cac:	63 e0       	ldi	r22, 0x03	; 3
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
					DIO_SetPinVal(DIO_PORTC, DIO_PIN_4, DIO_PIN_OFF);		
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	64 e0       	ldi	r22, 0x04	; 4
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
					LED0_ON();		
     cbe:	0e 94 41 05 	call	0xa82	; 0xa82 <LED0_ON>
     cc2:	10 c0       	rjmp	.+32     	; 0xce4 <main+0x23e>
				}
				else
				{
					TIMER2_Stop();
     cc4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <TIMER2_Stop>
					DIO_SetPinVal(DIO_PORTC, DIO_PIN_3, DIO_PIN_OFF);
     cc8:	40 e0       	ldi	r20, 0x00	; 0
     cca:	63 e0       	ldi	r22, 0x03	; 3
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
					DIO_SetPinVal(DIO_PORTC, DIO_PIN_4, DIO_PIN_OFF);
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	64 e0       	ldi	r22, 0x04	; 4
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
					LED0_OFF();
     cdc:	0e 94 47 05 	call	0xa8e	; 0xa8e <LED0_OFF>
					LED1_OFF();
     ce0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <LED1_OFF>
				}							
				
				// Switch to Setting Temperature Mode
				if (BUTTON0_GetPinVal() | BUTTON1_GetPinVal()) 
     ce4:	0e 94 0c 03 	call	0x618	; 0x618 <BUTTON0_GetPinVal>
     ce8:	18 2f       	mov	r17, r24
     cea:	0e 94 24 03 	call	0x648	; 0x648 <BUTTON1_GetPinVal>
     cee:	81 2b       	or	r24, r17
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <main+0x24e>
     cf2:	0f cf       	rjmp	.-482    	; 0xb12 <main+0x6c>
				{
					Mode_Selector = 0;
     cf4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Mode_Selector>
     cf8:	0c cf       	rjmp	.-488    	; 0xb12 <main+0x6c>
				}
						
			}
			else  // Setting Temperature Mode
			{
				if (Mode_B == 0) // one time executed block
     cfa:	a1 10       	cpse	r10, r1
     cfc:	19 c0       	rjmp	.+50     	; 0xd30 <main+0x28a>
				{
					Mode_A = 0;
					Mode_B = 1;
					
					T2_OVF_count_1 = 0;	
     cfe:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <T2_OVF_count_1+0x1>
     d02:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <T2_OVF_count_1>
					Task_Timer_Switch = 0;
     d06:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Task_Timer_Switch>
					TIMER2_Start();	
     d0a:	0e 94 ef 09 	call	0x13de	; 0x13de <TIMER2_Start>
						
					// Turn off LEDs
					LED0_OFF();
     d0e:	0e 94 47 05 	call	0xa8e	; 0xa8e <LED0_OFF>
					LED1_OFF();
     d12:	0e 94 4d 05 	call	0xa9a	; 0xa9a <LED1_OFF>
					// Turn off Actuators
					DIO_SetPinVal(DIO_PORTC, DIO_PIN_3, DIO_PIN_OFF);
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	63 e0       	ldi	r22, 0x03	; 3
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
					DIO_SetPinVal(DIO_PORTC, DIO_PIN_4, DIO_PIN_OFF);			
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	64 e0       	ldi	r22, 0x04	; 4
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
			else  // Setting Temperature Mode
			{
				if (Mode_B == 0) // one time executed block
				{
					Mode_A = 0;
					Mode_B = 1;
     d2a:	aa 24       	eor	r10, r10
     d2c:	a3 94       	inc	r10
			}
			else  // Setting Temperature Mode
			{
				if (Mode_B == 0) // one time executed block
				{
					Mode_A = 0;
     d2e:	b1 2c       	mov	r11, r1
					// Turn off Actuators
					DIO_SetPinVal(DIO_PORTC, DIO_PIN_3, DIO_PIN_OFF);
					DIO_SetPinVal(DIO_PORTC, DIO_PIN_4, DIO_PIN_OFF);			
				}				
			
				Ones = Desired_Temp % 10;
     d30:	8d ec       	ldi	r24, 0xCD	; 205
     d32:	d8 9e       	mul	r13, r24
     d34:	81 2d       	mov	r24, r1
     d36:	11 24       	eor	r1, r1
     d38:	86 95       	lsr	r24
     d3a:	86 95       	lsr	r24
     d3c:	86 95       	lsr	r24
     d3e:	28 2f       	mov	r18, r24
     d40:	22 0f       	add	r18, r18
     d42:	92 2f       	mov	r25, r18
     d44:	99 0f       	add	r25, r25
     d46:	99 0f       	add	r25, r25
     d48:	92 0f       	add	r25, r18
     d4a:	5d 2d       	mov	r21, r13
     d4c:	59 1b       	sub	r21, r25
     d4e:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <Ones>
				Tens = Desired_Temp / 10;	
     d52:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Tens>
							
				if (BUTTON0_GetPinVal()) // up button to increase the desired temp
     d56:	0e 94 0c 03 	call	0x618	; 0x618 <BUTTON0_GetPinVal>
     d5a:	88 23       	and	r24, r24
     d5c:	21 f1       	breq	.+72     	; 0xda6 <main+0x300>
				{
					T2_OVF_count_1 = 0;				
     d5e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <T2_OVF_count_1+0x1>
     d62:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <T2_OVF_count_1>
					Desired_Temp = (Desired_Temp - 5) >= 35? Desired_Temp - 5 : Desired_Temp;
     d66:	8d 2d       	mov	r24, r13
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	05 97       	sbiw	r24, 0x05	; 5
     d6c:	83 97       	sbiw	r24, 0x23	; 35
     d6e:	14 f0       	brlt	.+4      	; 0xd74 <main+0x2ce>
     d70:	8b ef       	ldi	r24, 0xFB	; 251
     d72:	d8 0e       	add	r13, r24
					Ones = Desired_Temp % 10;
     d74:	8d ec       	ldi	r24, 0xCD	; 205
     d76:	d8 9e       	mul	r13, r24
     d78:	81 2d       	mov	r24, r1
     d7a:	11 24       	eor	r1, r1
     d7c:	86 95       	lsr	r24
     d7e:	86 95       	lsr	r24
     d80:	86 95       	lsr	r24
     d82:	28 2f       	mov	r18, r24
     d84:	22 0f       	add	r18, r18
     d86:	92 2f       	mov	r25, r18
     d88:	99 0f       	add	r25, r25
     d8a:	99 0f       	add	r25, r25
     d8c:	92 0f       	add	r25, r18
     d8e:	2d 2d       	mov	r18, r13
     d90:	29 1b       	sub	r18, r25
     d92:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <Ones>
					Tens = Desired_Temp / 10;
     d96:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Tens>
					// onces we change the desired value, the newly desired value should be store at EEPROM
					EEPROM_WriteByte(EEPROM_page, EEPROM_data_Add, Desired_Temp);			
     d9a:	4d 2d       	mov	r20, r13
     d9c:	60 e2       	ldi	r22, 0x20	; 32
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 5f 01 	call	0x2be	; 0x2be <EEPROM_WriteByte>
     da4:	b6 ce       	rjmp	.-660    	; 0xb12 <main+0x6c>
				}
				else if (BUTTON1_GetPinVal()) // down button to decrease the desired temp
     da6:	0e 94 24 03 	call	0x648	; 0x648 <BUTTON1_GetPinVal>
     daa:	88 23       	and	r24, r24
     dac:	09 f4       	brne	.+2      	; 0xdb0 <main+0x30a>
     dae:	b1 ce       	rjmp	.-670    	; 0xb12 <main+0x6c>
				{
					T2_OVF_count_1 = 0;				
     db0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <T2_OVF_count_1+0x1>
     db4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <T2_OVF_count_1>
					Desired_Temp = (Desired_Temp + 5) <= 75? Desired_Temp + 5 : Desired_Temp;
     db8:	8d 2d       	mov	r24, r13
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	05 96       	adiw	r24, 0x05	; 5
     dbe:	8c 34       	cpi	r24, 0x4C	; 76
     dc0:	91 05       	cpc	r25, r1
     dc2:	14 f4       	brge	.+4      	; 0xdc8 <main+0x322>
     dc4:	45 e0       	ldi	r20, 0x05	; 5
     dc6:	d4 0e       	add	r13, r20
					Ones = Desired_Temp % 10;
     dc8:	8d ec       	ldi	r24, 0xCD	; 205
     dca:	d8 9e       	mul	r13, r24
     dcc:	81 2d       	mov	r24, r1
     dce:	11 24       	eor	r1, r1
     dd0:	86 95       	lsr	r24
     dd2:	86 95       	lsr	r24
     dd4:	86 95       	lsr	r24
     dd6:	28 2f       	mov	r18, r24
     dd8:	22 0f       	add	r18, r18
     dda:	92 2f       	mov	r25, r18
     ddc:	99 0f       	add	r25, r25
     dde:	99 0f       	add	r25, r25
     de0:	92 0f       	add	r25, r18
     de2:	5d 2d       	mov	r21, r13
     de4:	59 1b       	sub	r21, r25
     de6:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <Ones>
					Tens = Desired_Temp / 10;
     dea:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Tens>
					EEPROM_WriteByte(EEPROM_page, EEPROM_data_Add, Desired_Temp);						
     dee:	4d 2d       	mov	r20, r13
     df0:	60 e2       	ldi	r22, 0x20	; 32
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	0e 94 5f 01 	call	0x2be	; 0x2be <EEPROM_WriteByte>
     df8:	8c ce       	rjmp	.-744    	; 0xb12 <main+0x6c>
			}		
		}
		else  // Even value (Off Mode)
		{
			// Default values once we turn off the heater
			Mode_Selector = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Mode_Selector>
				
			// Turn off Timers
			//TIMER0_Stop();
			TIMER2_Stop();
     e00:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <TIMER2_Stop>
			
			// Turn off 7-Segments / Reinitialize 7-Segments
 			S7_INIT();
     e04:	0e 94 cf 02 	call	0x59e	; 0x59e <S7_INIT>
			
			// Turn off LEDs
			LED0_OFF();
     e08:	0e 94 47 05 	call	0xa8e	; 0xa8e <LED0_OFF>
			LED1_OFF();
     e0c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <LED1_OFF>
			
			// Turn off Actuators
			DIO_SetPinVal(DIO_PORTC, DIO_PIN_3, DIO_PIN_OFF);
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	63 e0       	ldi	r22, 0x03	; 3
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
			DIO_SetPinVal(DIO_PORTC, DIO_PIN_4, DIO_PIN_OFF);
     e1a:	40 e0       	ldi	r20, 0x00	; 0
     e1c:	64 e0       	ldi	r22, 0x04	; 4
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
     e24:	76 ce       	rjmp	.-788    	; 0xb12 <main+0x6c>

00000e26 <TIMER0_INIT>:
			OCR1A = T1_Init_val;
		}
	}
#endif

}
     e26:	80 e8       	ldi	r24, 0x80	; 128
     e28:	8f bf       	out	0x3f, r24	; 63
     e2a:	83 b7       	in	r24, 0x33	; 51
     e2c:	87 7f       	andi	r24, 0xF7	; 247
     e2e:	83 bf       	out	0x33, r24	; 51
     e30:	83 b7       	in	r24, 0x33	; 51
     e32:	8f 7b       	andi	r24, 0xBF	; 191
     e34:	83 bf       	out	0x33, r24	; 51
     e36:	89 b7       	in	r24, 0x39	; 57
     e38:	84 7d       	andi	r24, 0xD4	; 212
     e3a:	81 60       	ori	r24, 0x01	; 1
     e3c:	89 bf       	out	0x39, r24	; 57
     e3e:	08 95       	ret

00000e40 <TIMER0_Start>:
     e40:	83 b7       	in	r24, 0x33	; 51
     e42:	88 77       	andi	r24, 0x78	; 120
     e44:	85 60       	ori	r24, 0x05	; 5
     e46:	83 bf       	out	0x33, r24	; 51
     e48:	08 95       	ret

00000e4a <TIMER0_SetDelay>:
     e4a:	4f 92       	push	r4
     e4c:	5f 92       	push	r5
     e4e:	6f 92       	push	r6
     e50:	7f 92       	push	r7
     e52:	8f 92       	push	r8
     e54:	9f 92       	push	r9
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
     e6c:	a8 ee       	ldi	r26, 0xE8	; 232
     e6e:	b3 e0       	ldi	r27, 0x03	; 3
     e70:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__muluhisi3>
     e74:	2b 01       	movw	r4, r22
     e76:	3c 01       	movw	r6, r24
     e78:	4b 01       	movw	r8, r22
     e7a:	5c 01       	movw	r10, r24
     e7c:	68 94       	set
     e7e:	15 f8       	bld	r1, 5
     e80:	b6 94       	lsr	r11
     e82:	a7 94       	ror	r10
     e84:	97 94       	ror	r9
     e86:	87 94       	ror	r8
     e88:	16 94       	lsr	r1
     e8a:	d1 f7       	brne	.-12     	; 0xe80 <TIMER0_SetDelay+0x36>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	88 16       	cp	r8, r24
     e90:	98 06       	cpc	r9, r24
     e92:	a1 04       	cpc	r10, r1
     e94:	b1 04       	cpc	r11, r1
     e96:	08 f0       	brcs	.+2      	; 0xe9a <TIMER0_SetDelay+0x50>
     e98:	4f c0       	rjmp	.+158    	; 0xf38 <TIMER0_SetDelay+0xee>
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	a0 e0       	ldi	r26, 0x00	; 0
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	88 19       	sub	r24, r8
     ea4:	99 09       	sbc	r25, r9
     ea6:	aa 09       	sbc	r26, r10
     ea8:	bb 09       	sbc	r27, r11
     eaa:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <T0_Init_val>
     eae:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <T0_Init_val+0x1>
     eb2:	a0 93 9f 00 	sts	0x009F, r26	; 0x80009f <T0_Init_val+0x2>
     eb6:	b0 93 a0 00 	sts	0x00A0, r27	; 0x8000a0 <T0_Init_val+0x3>
     eba:	82 bf       	out	0x32, r24	; 50
     ebc:	84 c0       	rjmp	.+264    	; 0xfc6 <TIMER0_SetDelay+0x17c>
     ebe:	c5 01       	movw	r24, r10
     ec0:	b4 01       	movw	r22, r8
     ec2:	a7 01       	movw	r20, r14
     ec4:	96 01       	movw	r18, r12
     ec6:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__udivmodsi4>
     eca:	e2 2f       	mov	r30, r18
     ecc:	d3 2f       	mov	r29, r19
     ece:	c4 2f       	mov	r28, r20
     ed0:	f5 2f       	mov	r31, r21
     ed2:	a2 2f       	mov	r26, r18
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	a7 01       	movw	r20, r14
     ed8:	96 01       	movw	r18, r12
     eda:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__muluhisi3>
     ede:	86 16       	cp	r8, r22
     ee0:	97 06       	cpc	r9, r23
     ee2:	a8 06       	cpc	r10, r24
     ee4:	b9 06       	cpc	r11, r25
     ee6:	11 f5       	brne	.+68     	; 0xf2c <TIMER0_SetDelay+0xe2>
     ee8:	e0 93 6b 00 	sts	0x006B, r30	; 0x80006b <T0_OVF_No>
     eec:	d0 93 6c 00 	sts	0x006C, r29	; 0x80006c <T0_OVF_No+0x1>
     ef0:	c0 93 6d 00 	sts	0x006D, r28	; 0x80006d <T0_OVF_No+0x2>
     ef4:	f0 93 6e 00 	sts	0x006E, r31	; 0x80006e <T0_OVF_No+0x3>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	a0 e0       	ldi	r26, 0x00	; 0
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	8c 19       	sub	r24, r12
     f02:	9d 09       	sbc	r25, r13
     f04:	ae 09       	sbc	r26, r14
     f06:	bf 09       	sbc	r27, r15
     f08:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <T0_Init_val>
     f0c:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <T0_Init_val+0x1>
     f10:	a0 93 9f 00 	sts	0x009F, r26	; 0x80009f <T0_Init_val+0x2>
     f14:	b0 93 a0 00 	sts	0x00A0, r27	; 0x8000a0 <T0_Init_val+0x3>
     f18:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <T0_Init_val_OVF>
     f1c:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <T0_Init_val_OVF+0x1>
     f20:	a0 93 93 00 	sts	0x0093, r26	; 0x800093 <T0_Init_val_OVF+0x2>
     f24:	b0 93 94 00 	sts	0x0094, r27	; 0x800094 <T0_Init_val_OVF+0x3>
     f28:	82 bf       	out	0x32, r24	; 50
     f2a:	10 e0       	ldi	r17, 0x00	; 0
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	c8 1a       	sub	r12, r24
     f30:	d8 0a       	sbc	r13, r24
     f32:	e8 0a       	sbc	r14, r24
     f34:	f8 0a       	sbc	r15, r24
     f36:	08 c0       	rjmp	.+16     	; 0xf48 <TIMER0_SetDelay+0xfe>
     f38:	0f 2e       	mov	r0, r31
     f3a:	f2 e8       	ldi	r31, 0x82	; 130
     f3c:	cf 2e       	mov	r12, r31
     f3e:	d1 2c       	mov	r13, r1
     f40:	e1 2c       	mov	r14, r1
     f42:	f1 2c       	mov	r15, r1
     f44:	f0 2d       	mov	r31, r0
     f46:	11 e0       	ldi	r17, 0x01	; 1
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	c8 16       	cp	r12, r24
     f4c:	d8 06       	cpc	r13, r24
     f4e:	e1 04       	cpc	r14, r1
     f50:	f1 04       	cpc	r15, r1
     f52:	08 f4       	brcc	.+2      	; 0xf56 <TIMER0_SetDelay+0x10c>
     f54:	b4 cf       	rjmp	.-152    	; 0xebe <TIMER0_SetDelay+0x74>
     f56:	11 23       	and	r17, r17
     f58:	b1 f1       	breq	.+108    	; 0xfc6 <TIMER0_SetDelay+0x17c>
     f5a:	03 2e       	mov	r0, r19
     f5c:	3e e0       	ldi	r19, 0x0E	; 14
     f5e:	76 94       	lsr	r7
     f60:	67 94       	ror	r6
     f62:	57 94       	ror	r5
     f64:	47 94       	ror	r4
     f66:	3a 95       	dec	r19
     f68:	d1 f7       	brne	.-12     	; 0xf5e <TIMER0_SetDelay+0x114>
     f6a:	30 2d       	mov	r19, r0
     f6c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <T0_OVF_No>
     f70:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <T0_OVF_No+0x1>
     f74:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <T0_OVF_No+0x2>
     f78:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <T0_OVF_No+0x3>
     f7c:	48 0e       	add	r4, r24
     f7e:	59 1e       	adc	r5, r25
     f80:	6a 1e       	adc	r6, r26
     f82:	7b 1e       	adc	r7, r27
     f84:	40 92 6b 00 	sts	0x006B, r4	; 0x80006b <T0_OVF_No>
     f88:	50 92 6c 00 	sts	0x006C, r5	; 0x80006c <T0_OVF_No+0x1>
     f8c:	60 92 6d 00 	sts	0x006D, r6	; 0x80006d <T0_OVF_No+0x2>
     f90:	70 92 6e 00 	sts	0x006E, r7	; 0x80006e <T0_OVF_No+0x3>
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	a0 e0       	ldi	r26, 0x00	; 0
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	88 19       	sub	r24, r8
     f9e:	91 09       	sbc	r25, r1
     fa0:	a1 09       	sbc	r26, r1
     fa2:	b1 09       	sbc	r27, r1
     fa4:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <T0_Init_val>
     fa8:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <T0_Init_val+0x1>
     fac:	a0 93 9f 00 	sts	0x009F, r26	; 0x80009f <T0_Init_val+0x2>
     fb0:	b0 93 a0 00 	sts	0x00A0, r27	; 0x8000a0 <T0_Init_val+0x3>
     fb4:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <T0_Init_val_OVF>
     fb8:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <T0_Init_val_OVF+0x1>
     fbc:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <T0_Init_val_OVF+0x2>
     fc0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <T0_Init_val_OVF+0x3>
     fc4:	82 bf       	out	0x32, r24	; 50
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	df 90       	pop	r13
     fd2:	cf 90       	pop	r12
     fd4:	bf 90       	pop	r11
     fd6:	af 90       	pop	r10
     fd8:	9f 90       	pop	r9
     fda:	8f 90       	pop	r8
     fdc:	7f 90       	pop	r7
     fde:	6f 90       	pop	r6
     fe0:	5f 90       	pop	r5
     fe2:	4f 90       	pop	r4
     fe4:	08 95       	ret

00000fe6 <__vector_11>:
     fe6:	1f 92       	push	r1
     fe8:	0f 92       	push	r0
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	0f 92       	push	r0
     fee:	11 24       	eor	r1, r1
     ff0:	2f 93       	push	r18
     ff2:	3f 93       	push	r19
     ff4:	4f 93       	push	r20
     ff6:	5f 93       	push	r21
     ff8:	6f 93       	push	r22
     ffa:	7f 93       	push	r23
     ffc:	8f 93       	push	r24
     ffe:	9f 93       	push	r25
    1000:	af 93       	push	r26
    1002:	bf 93       	push	r27
    1004:	ef 93       	push	r30
    1006:	ff 93       	push	r31
    1008:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <count_0.1854>
    100c:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <count_0.1854+0x1>
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <count_0.1854+0x1>
    1016:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <count_0.1854>
    101a:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <count_1.1855>
    101e:	30 91 84 00 	lds	r19, 0x0084	; 0x800084 <count_1.1855+0x1>
    1022:	2f 5f       	subi	r18, 0xFF	; 255
    1024:	3f 4f       	sbci	r19, 0xFF	; 255
    1026:	30 93 84 00 	sts	0x0084, r19	; 0x800084 <count_1.1855+0x1>
    102a:	20 93 83 00 	sts	0x0083, r18	; 0x800083 <count_1.1855>
    102e:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <T0_OVF_No>
    1032:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <T0_OVF_No+0x1>
    1036:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <T0_OVF_No+0x2>
    103a:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <T0_OVF_No+0x3>
    103e:	41 30       	cpi	r20, 0x01	; 1
    1040:	51 05       	cpc	r21, r1
    1042:	61 05       	cpc	r22, r1
    1044:	71 05       	cpc	r23, r1
    1046:	09 f0       	breq	.+2      	; 0x104a <__vector_11+0x64>
    1048:	5f c0       	rjmp	.+190    	; 0x1108 <__vector_11+0x122>
    104a:	09 2e       	mov	r0, r25
    104c:	00 0c       	add	r0, r0
    104e:	aa 0b       	sbc	r26, r26
    1050:	bb 0b       	sbc	r27, r27
    1052:	48 17       	cp	r20, r24
    1054:	59 07       	cpc	r21, r25
    1056:	6a 07       	cpc	r22, r26
    1058:	7b 07       	cpc	r23, r27
    105a:	09 f0       	breq	.+2      	; 0x105e <__vector_11+0x78>
    105c:	6c c0       	rjmp	.+216    	; 0x1136 <__vector_11+0x150>
    105e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <count_2.1856>
    1062:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <count_2.1856+0x1>
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <count_2.1856+0x1>
    106c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <count_2.1856>
    1070:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <Task_Timer_Switch>
    1074:	41 11       	cpse	r20, r1
    1076:	0b c0       	rjmp	.+22     	; 0x108e <__vector_11+0xa8>
    1078:	64 e6       	ldi	r22, 0x64	; 100
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divmodhi4>
    1080:	89 2b       	or	r24, r25
    1082:	29 f4       	brne	.+10     	; 0x108e <__vector_11+0xa8>
    1084:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    108e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <counter>
    1092:	80 ff       	sbrs	r24, 0
    1094:	31 c0       	rjmp	.+98     	; 0x10f8 <__vector_11+0x112>
    1096:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    109a:	80 fd       	sbrc	r24, 0
    109c:	23 c0       	rjmp	.+70     	; 0x10e4 <__vector_11+0xfe>
    109e:	20 fd       	sbrc	r18, 0
    10a0:	0a c0       	rjmp	.+20     	; 0x10b6 <__vector_11+0xd0>
    10a2:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <Tens>
    10a6:	80 e1       	ldi	r24, 0x10	; 16
    10a8:	28 9f       	mul	r18, r24
    10aa:	90 01       	movw	r18, r0
    10ac:	11 24       	eor	r1, r1
    10ae:	8b b3       	in	r24, 0x1b	; 27
    10b0:	8f 70       	andi	r24, 0x0F	; 15
    10b2:	82 2b       	or	r24, r18
    10b4:	09 c0       	rjmp	.+18     	; 0x10c8 <__vector_11+0xe2>
    10b6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Ones>
    10ba:	20 e1       	ldi	r18, 0x10	; 16
    10bc:	82 9f       	mul	r24, r18
    10be:	c0 01       	movw	r24, r0
    10c0:	11 24       	eor	r1, r1
    10c2:	2b b3       	in	r18, 0x1b	; 27
    10c4:	2f 70       	andi	r18, 0x0F	; 15
    10c6:	82 2b       	or	r24, r18
    10c8:	8b bb       	out	0x1b, r24	; 27
    10ca:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <count_1.1855>
    10ce:	80 fd       	sbrc	r24, 0
    10d0:	04 c0       	rjmp	.+8      	; 0x10da <__vector_11+0xf4>
    10d2:	88 b3       	in	r24, 0x18	; 24
    10d4:	89 7f       	andi	r24, 0xF9	; 249
    10d6:	84 60       	ori	r24, 0x04	; 4
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <__vector_11+0xfa>
    10da:	88 b3       	in	r24, 0x18	; 24
    10dc:	89 7f       	andi	r24, 0xF9	; 249
    10de:	82 60       	ori	r24, 0x02	; 2
    10e0:	88 bb       	out	0x18, r24	; 24
    10e2:	0a c0       	rjmp	.+20     	; 0x10f8 <__vector_11+0x112>
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	62 e0       	ldi	r22, 0x02	; 2
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <DIO_SetPinVal>
    10f8:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <count_0.1854+0x1>
    10fc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <count_0.1854>
    1100:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <T0_Init_val>
    1104:	82 bf       	out	0x32, r24	; 50
    1106:	17 c0       	rjmp	.+46     	; 0x1136 <__vector_11+0x150>
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	21 f4       	brne	.+8      	; 0x1116 <__vector_11+0x130>
    110e:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <T0_Init_val_OVF>
    1112:	82 bf       	out	0x32, r24	; 50
    1114:	10 c0       	rjmp	.+32     	; 0x1136 <__vector_11+0x150>
    1116:	09 2e       	mov	r0, r25
    1118:	00 0c       	add	r0, r0
    111a:	aa 0b       	sbc	r26, r26
    111c:	bb 0b       	sbc	r27, r27
    111e:	48 17       	cp	r20, r24
    1120:	59 07       	cpc	r21, r25
    1122:	6a 07       	cpc	r22, r26
    1124:	7b 07       	cpc	r23, r27
    1126:	39 f4       	brne	.+14     	; 0x1136 <__vector_11+0x150>
    1128:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <count_0.1854+0x1>
    112c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <count_0.1854>
    1130:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <T0_Init_val>
    1134:	82 bf       	out	0x32, r24	; 50
    1136:	ff 91       	pop	r31
    1138:	ef 91       	pop	r30
    113a:	bf 91       	pop	r27
    113c:	af 91       	pop	r26
    113e:	9f 91       	pop	r25
    1140:	8f 91       	pop	r24
    1142:	7f 91       	pop	r23
    1144:	6f 91       	pop	r22
    1146:	5f 91       	pop	r21
    1148:	4f 91       	pop	r20
    114a:	3f 91       	pop	r19
    114c:	2f 91       	pop	r18
    114e:	0f 90       	pop	r0
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	0f 90       	pop	r0
    1154:	1f 90       	pop	r1
    1156:	18 95       	reti

00001158 <__vector_10>:
    1158:	1f 92       	push	r1
    115a:	0f 92       	push	r0
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	0f 92       	push	r0
    1160:	11 24       	eor	r1, r1
    1162:	4f 93       	push	r20
    1164:	5f 93       	push	r21
    1166:	6f 93       	push	r22
    1168:	7f 93       	push	r23
    116a:	8f 93       	push	r24
    116c:	9f 93       	push	r25
    116e:	af 93       	push	r26
    1170:	bf 93       	push	r27
    1172:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <count_0.1862>
    1176:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <count_0.1862+0x1>
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <count_0.1862+0x1>
    1180:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <count_0.1862>
    1184:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <T0_OVF_No>
    1188:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <T0_OVF_No+0x1>
    118c:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <T0_OVF_No+0x2>
    1190:	70 91 6e 00 	lds	r23, 0x006E	; 0x80006e <T0_OVF_No+0x3>
    1194:	41 30       	cpi	r20, 0x01	; 1
    1196:	51 05       	cpc	r21, r1
    1198:	61 05       	cpc	r22, r1
    119a:	71 05       	cpc	r23, r1
    119c:	89 f4       	brne	.+34     	; 0x11c0 <__vector_10+0x68>
    119e:	09 2e       	mov	r0, r25
    11a0:	00 0c       	add	r0, r0
    11a2:	aa 0b       	sbc	r26, r26
    11a4:	bb 0b       	sbc	r27, r27
    11a6:	48 17       	cp	r20, r24
    11a8:	59 07       	cpc	r21, r25
    11aa:	6a 07       	cpc	r22, r26
    11ac:	7b 07       	cpc	r23, r27
    11ae:	f9 f4       	brne	.+62     	; 0x11ee <__vector_10+0x96>
    11b0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <count_0.1862+0x1>
    11b4:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <count_0.1862>
    11b8:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <T0_Init_val>
    11bc:	8c bf       	out	0x3c, r24	; 60
    11be:	17 c0       	rjmp	.+46     	; 0x11ee <__vector_10+0x96>
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	91 05       	cpc	r25, r1
    11c4:	21 f4       	brne	.+8      	; 0x11ce <__vector_10+0x76>
    11c6:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <T0_Init_val_OVF>
    11ca:	8c bf       	out	0x3c, r24	; 60
    11cc:	10 c0       	rjmp	.+32     	; 0x11ee <__vector_10+0x96>
    11ce:	09 2e       	mov	r0, r25
    11d0:	00 0c       	add	r0, r0
    11d2:	aa 0b       	sbc	r26, r26
    11d4:	bb 0b       	sbc	r27, r27
    11d6:	48 17       	cp	r20, r24
    11d8:	59 07       	cpc	r21, r25
    11da:	6a 07       	cpc	r22, r26
    11dc:	7b 07       	cpc	r23, r27
    11de:	39 f4       	brne	.+14     	; 0x11ee <__vector_10+0x96>
    11e0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <count_0.1862+0x1>
    11e4:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <count_0.1862>
    11e8:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <T0_Init_val>
    11ec:	8c bf       	out	0x3c, r24	; 60
    11ee:	bf 91       	pop	r27
    11f0:	af 91       	pop	r26
    11f2:	9f 91       	pop	r25
    11f4:	8f 91       	pop	r24
    11f6:	7f 91       	pop	r23
    11f8:	6f 91       	pop	r22
    11fa:	5f 91       	pop	r21
    11fc:	4f 91       	pop	r20
    11fe:	0f 90       	pop	r0
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	0f 90       	pop	r0
    1204:	1f 90       	pop	r1
    1206:	18 95       	reti

00001208 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    1208:	1f 92       	push	r1
    120a:	0f 92       	push	r0
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	0f 92       	push	r0
    1210:	11 24       	eor	r1, r1
    1212:	2f 93       	push	r18
    1214:	3f 93       	push	r19
    1216:	4f 93       	push	r20
    1218:	5f 93       	push	r21
    121a:	6f 93       	push	r22
    121c:	7f 93       	push	r23
    121e:	8f 93       	push	r24
    1220:	9f 93       	push	r25
    1222:	af 93       	push	r26
    1224:	bf 93       	push	r27
    1226:	ef 93       	push	r30
    1228:	ff 93       	push	r31
	static int count_0 = 0; //counter to count the number of overflows
	static int count_1 = 0; //counter to count the number of overflows
	count_0++;
    122a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <count_0.1889>
    122e:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <count_0.1889+0x1>
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <count_0.1889+0x1>
    1238:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <count_0.1889>
	count_1++;
    123c:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <count_1.1890>
    1240:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <count_1.1890+0x1>
    1244:	2f 5f       	subi	r18, 0xFF	; 255
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	30 93 7c 00 	sts	0x007C, r19	; 0x80007c <count_1.1890+0x1>
    124c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <count_1.1890>
	if (T1_OVF_No == 1)
    1250:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <T1_OVF_No>
    1254:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <T1_OVF_No+0x1>
    1258:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <T1_OVF_No+0x2>
    125c:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <T1_OVF_No+0x3>
    1260:	41 30       	cpi	r20, 0x01	; 1
    1262:	51 05       	cpc	r21, r1
    1264:	61 05       	cpc	r22, r1
    1266:	71 05       	cpc	r23, r1
    1268:	c1 f4       	brne	.+48     	; 0x129a <__vector_9+0x92>
	{
		if (count_0 == T1_OVF_No)
    126a:	09 2e       	mov	r0, r25
    126c:	00 0c       	add	r0, r0
    126e:	aa 0b       	sbc	r26, r26
    1270:	bb 0b       	sbc	r27, r27
    1272:	48 17       	cp	r20, r24
    1274:	59 07       	cpc	r21, r25
    1276:	6a 07       	cpc	r22, r26
    1278:	7b 07       	cpc	r23, r27
    127a:	61 f5       	brne	.+88     	; 0x12d4 <__vector_9+0xcc>
		{
			//write your code here
			DIO_TogglePin(DIO_PORTD, DIO_PIN_3);
    127c:	63 e0       	ldi	r22, 0x03	; 3
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_TogglePin>
					
			count_0 = 0;
    1284:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <count_0.1889+0x1>
    1288:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <count_0.1889>
			TCNT1 = T1_Init_val;
    128c:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <T1_Init_val>
    1290:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <T1_Init_val+0x1>
    1294:	9d bd       	out	0x2d, r25	; 45
    1296:	8c bd       	out	0x2c, r24	; 44
    1298:	1d c0       	rjmp	.+58     	; 0x12d4 <__vector_9+0xcc>
		}
	}
	else
	{
		if (count_0 == 1)
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	39 f4       	brne	.+14     	; 0x12ae <__vector_9+0xa6>
		{
			TCNT1 = T1_Init_val_OVF;
    12a0:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <T1_Init_val_OVF>
    12a4:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <T1_Init_val_OVF+0x1>
    12a8:	9d bd       	out	0x2d, r25	; 45
    12aa:	8c bd       	out	0x2c, r24	; 44
    12ac:	13 c0       	rjmp	.+38     	; 0x12d4 <__vector_9+0xcc>
		}
		else if (count_0 == T1_OVF_No)
    12ae:	09 2e       	mov	r0, r25
    12b0:	00 0c       	add	r0, r0
    12b2:	aa 0b       	sbc	r26, r26
    12b4:	bb 0b       	sbc	r27, r27
    12b6:	48 17       	cp	r20, r24
    12b8:	59 07       	cpc	r21, r25
    12ba:	6a 07       	cpc	r22, r26
    12bc:	7b 07       	cpc	r23, r27
    12be:	51 f4       	brne	.+20     	; 0x12d4 <__vector_9+0xcc>
		{
			//write your code here
			
			
			count_0 = 0;	
    12c0:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <count_0.1889+0x1>
    12c4:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <count_0.1889>
			TCNT1 = T1_Init_val;
    12c8:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <T1_Init_val>
    12cc:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <T1_Init_val+0x1>
    12d0:	9d bd       	out	0x2d, r25	; 45
    12d2:	8c bd       	out	0x2c, r24	; 44
			
			//TIMER1_Stop();
		}
	}
}
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	0f 90       	pop	r0
    12f2:	1f 90       	pop	r1
    12f4:	18 95       	reti

000012f6 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    12f6:	1f 92       	push	r1
    12f8:	0f 92       	push	r0
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	0f 92       	push	r0
    12fe:	11 24       	eor	r1, r1
    1300:	2f 93       	push	r18
    1302:	3f 93       	push	r19
    1304:	4f 93       	push	r20
    1306:	5f 93       	push	r21
    1308:	6f 93       	push	r22
    130a:	7f 93       	push	r23
    130c:	8f 93       	push	r24
    130e:	9f 93       	push	r25
    1310:	af 93       	push	r26
    1312:	bf 93       	push	r27
    1314:	ef 93       	push	r30
    1316:	ff 93       	push	r31
	static int count_0 = 0; //counter to count the number of overflows
	count_0++;
    1318:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <count_0.1896>
    131c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <count_0.1896+0x1>
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <count_0.1896+0x1>
    1326:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <count_0.1896>
	if (T1_OVF_No == 1)
    132a:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <T1_OVF_No>
    132e:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <T1_OVF_No+0x1>
    1332:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <T1_OVF_No+0x2>
    1336:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <T1_OVF_No+0x3>
    133a:	41 30       	cpi	r20, 0x01	; 1
    133c:	51 05       	cpc	r21, r1
    133e:	61 05       	cpc	r22, r1
    1340:	71 05       	cpc	r23, r1
    1342:	c1 f4       	brne	.+48     	; 0x1374 <__vector_7+0x7e>
	{
		if (count_0 == T1_OVF_No)
    1344:	09 2e       	mov	r0, r25
    1346:	00 0c       	add	r0, r0
    1348:	aa 0b       	sbc	r26, r26
    134a:	bb 0b       	sbc	r27, r27
    134c:	48 17       	cp	r20, r24
    134e:	59 07       	cpc	r21, r25
    1350:	6a 07       	cpc	r22, r26
    1352:	7b 07       	cpc	r23, r27
    1354:	61 f5       	brne	.+88     	; 0x13ae <__vector_7+0xb8>
		{
			//write your code here
			DIO_TogglePin(DIO_PORTD, DIO_PIN_3);
    1356:	63 e0       	ldi	r22, 0x03	; 3
    1358:	83 e0       	ldi	r24, 0x03	; 3
    135a:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_TogglePin>
			
			count_0 = 0;
    135e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <count_0.1896+0x1>
    1362:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <count_0.1896>
			OCR1A = T1_Init_val;
    1366:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <T1_Init_val>
    136a:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <T1_Init_val+0x1>
    136e:	9b bd       	out	0x2b, r25	; 43
    1370:	8a bd       	out	0x2a, r24	; 42
    1372:	1d c0       	rjmp	.+58     	; 0x13ae <__vector_7+0xb8>
		}
	}
	else
	{
		if (count_0 == 1)
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	39 f4       	brne	.+14     	; 0x1388 <__vector_7+0x92>
		{
			OCR1A = T1_Init_val_OVF;
    137a:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <T1_Init_val_OVF>
    137e:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <T1_Init_val_OVF+0x1>
    1382:	9b bd       	out	0x2b, r25	; 43
    1384:	8a bd       	out	0x2a, r24	; 42
    1386:	13 c0       	rjmp	.+38     	; 0x13ae <__vector_7+0xb8>
		}
		else if (count_0 == T1_OVF_No)
    1388:	09 2e       	mov	r0, r25
    138a:	00 0c       	add	r0, r0
    138c:	aa 0b       	sbc	r26, r26
    138e:	bb 0b       	sbc	r27, r27
    1390:	48 17       	cp	r20, r24
    1392:	59 07       	cpc	r21, r25
    1394:	6a 07       	cpc	r22, r26
    1396:	7b 07       	cpc	r23, r27
    1398:	51 f4       	brne	.+20     	; 0x13ae <__vector_7+0xb8>
		{
			//write your code here

			count_0 = 0;
    139a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <count_0.1896+0x1>
    139e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <count_0.1896>
			OCR1A = T1_Init_val;
    13a2:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <T1_Init_val>
    13a6:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <T1_Init_val+0x1>
    13aa:	9b bd       	out	0x2b, r25	; 43
    13ac:	8a bd       	out	0x2a, r24	; 42
		}
	}	
}
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	0f 90       	pop	r0
    13cc:	1f 90       	pop	r1
    13ce:	18 95       	reti

000013d0 <TIMER2_INIT>:
///////////////****************************Timer2 functions****************************///////////////

void TIMER2_INIT(void)
{
	/*Global Interrupt*/
	SREG = GLOBAL_INT << 7;
    13d0:	80 e8       	ldi	r24, 0x80	; 128
    13d2:	8f bf       	out	0x3f, r24	; 63
	
	/*Peripheral Interrupt*/
	#if TIMER2_MODE == NORMAL_MODE
	TIMSK = (TIMER2_OVF_INT << 6) | (TIMSK & 0x17);
    13d4:	89 b7       	in	r24, 0x39	; 57
    13d6:	87 71       	andi	r24, 0x17	; 23
    13d8:	80 64       	ori	r24, 0x40	; 64
    13da:	89 bf       	out	0x39, r24	; 57
    13dc:	08 95       	ret

000013de <TIMER2_Start>:

	
}
void TIMER2_Start(void)
{
	TCCR2 = TIMER2_CLOCK;
    13de:	87 e0       	ldi	r24, 0x07	; 7
    13e0:	85 bd       	out	0x25, r24	; 37
    13e2:	08 95       	ret

000013e4 <TIMER2_Stop>:
}
void TIMER2_Stop(void)
{
	TCCR2 = T2_NO_CLOCK;
    13e4:	15 bc       	out	0x25, r1	; 37
    13e6:	08 95       	ret

000013e8 <TIMER2_SetDelay>:
}
void TIMER2_SetDelay(Uint32 delay)
{
    13e8:	4f 92       	push	r4
    13ea:	5f 92       	push	r5
    13ec:	6f 92       	push	r6
    13ee:	7f 92       	push	r7
    13f0:	8f 92       	push	r8
    13f2:	9f 92       	push	r9
    13f4:	af 92       	push	r10
    13f6:	bf 92       	push	r11
    13f8:	cf 92       	push	r12
    13fa:	df 92       	push	r13
    13fc:	ef 92       	push	r14
    13fe:	ff 92       	push	r15
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	9b 01       	movw	r18, r22
    1408:	ac 01       	movw	r20, r24
	Uint8 Tick_time, check = 1;
	Uint32 i;
	Uint32 Tick_num;
	Uint8 OVF_buf; //variable to store the possible number of overflows
	Tick_time = 1024 / 16; //tick_time in micro seconds
	Tick_num = (delay * 1000) / Tick_time; //total number of ticks needed to generate our time
    140a:	a8 ee       	ldi	r26, 0xE8	; 232
    140c:	b3 e0       	ldi	r27, 0x03	; 3
    140e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__muluhisi3>
    1412:	2b 01       	movw	r4, r22
    1414:	3c 01       	movw	r6, r24
    1416:	4b 01       	movw	r8, r22
    1418:	5c 01       	movw	r10, r24
    141a:	68 94       	set
    141c:	15 f8       	bld	r1, 5
    141e:	b6 94       	lsr	r11
    1420:	a7 94       	ror	r10
    1422:	97 94       	ror	r9
    1424:	87 94       	ror	r8
    1426:	16 94       	lsr	r1
    1428:	d1 f7       	brne	.-12     	; 0x141e <TIMER2_SetDelay+0x36>
	
	//Normal mode
	#if TIMER2_MODE == NORMAL_MODE
	//case of tick_num is less than 256 (16.4 ms)
	if (Tick_num <= 256)
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	88 16       	cp	r8, r24
    142e:	98 06       	cpc	r9, r24
    1430:	a1 04       	cpc	r10, r1
    1432:	b1 04       	cpc	r11, r1
    1434:	08 f0       	brcs	.+2      	; 0x1438 <TIMER2_SetDelay+0x50>
    1436:	4f c0       	rjmp	.+158    	; 0x14d6 <TIMER2_SetDelay+0xee>
	{
		T2_Init_val = 256 - Tick_num;
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	a0 e0       	ldi	r26, 0x00	; 0
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	88 19       	sub	r24, r8
    1442:	99 09       	sbc	r25, r9
    1444:	aa 09       	sbc	r26, r10
    1446:	bb 09       	sbc	r27, r11
    1448:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <T2_Init_val>
    144c:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <T2_Init_val+0x1>
    1450:	a0 93 9b 00 	sts	0x009B, r26	; 0x80009b <T2_Init_val+0x2>
    1454:	b0 93 9c 00 	sts	0x009C, r27	; 0x80009c <T2_Init_val+0x3>
		TCNT2 = T2_Init_val;
    1458:	84 bd       	out	0x24, r24	; 36
    145a:	84 c0       	rjmp	.+264    	; 0x1564 <TIMER2_SetDelay+0x17c>
	//case of tick_num is bigger than 256 (16.4 ms)
	else
	{
		for (i = 130; i <= 256; i++) //check if the number of overflows is integer
		{
			OVF_buf = Tick_num / i; //buffer to store the number of OVF at every register size
    145c:	c5 01       	movw	r24, r10
    145e:	b4 01       	movw	r22, r8
    1460:	a7 01       	movw	r20, r14
    1462:	96 01       	movw	r18, r12
    1464:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__udivmodsi4>
    1468:	e2 2f       	mov	r30, r18
    146a:	d3 2f       	mov	r29, r19
    146c:	c4 2f       	mov	r28, r20
    146e:	f5 2f       	mov	r31, r21
			if (Tick_num == (OVF_buf * i))
    1470:	a2 2f       	mov	r26, r18
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	a7 01       	movw	r20, r14
    1476:	96 01       	movw	r18, r12
    1478:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__muluhisi3>
    147c:	86 16       	cp	r8, r22
    147e:	97 06       	cpc	r9, r23
    1480:	a8 06       	cpc	r10, r24
    1482:	b9 06       	cpc	r11, r25
    1484:	11 f5       	brne	.+68     	; 0x14ca <TIMER2_SetDelay+0xe2>
			{
				T2_OVF_No = Tick_num / i;
    1486:	e0 93 63 00 	sts	0x0063, r30	; 0x800063 <T2_OVF_No>
    148a:	d0 93 64 00 	sts	0x0064, r29	; 0x800064 <T2_OVF_No+0x1>
    148e:	c0 93 65 00 	sts	0x0065, r28	; 0x800065 <T2_OVF_No+0x2>
    1492:	f0 93 66 00 	sts	0x0066, r31	; 0x800066 <T2_OVF_No+0x3>
				T2_Init_val = 256 - i; //initial value at the first OVF
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	91 e0       	ldi	r25, 0x01	; 1
    149a:	a0 e0       	ldi	r26, 0x00	; 0
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	8c 19       	sub	r24, r12
    14a0:	9d 09       	sbc	r25, r13
    14a2:	ae 09       	sbc	r26, r14
    14a4:	bf 09       	sbc	r27, r15
    14a6:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <T2_Init_val>
    14aa:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <T2_Init_val+0x1>
    14ae:	a0 93 9b 00 	sts	0x009B, r26	; 0x80009b <T2_Init_val+0x2>
    14b2:	b0 93 9c 00 	sts	0x009C, r27	; 0x80009c <T2_Init_val+0x3>
				T2_Init_val_OVF = 256 - i; //initialize value at the rest of OVF
    14b6:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <T2_Init_val_OVF>
    14ba:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <T2_Init_val_OVF+0x1>
    14be:	a0 93 97 00 	sts	0x0097, r26	; 0x800097 <T2_Init_val_OVF+0x2>
    14c2:	b0 93 98 00 	sts	0x0098, r27	; 0x800098 <T2_Init_val_OVF+0x3>
				TCNT2 = T2_Init_val; //initializing the TCNT0 with Init_val
    14c6:	84 bd       	out	0x24, r24	; 36
				check = 0; //variable to use in checking of number of OVF being integer or decimal
    14c8:	10 e0       	ldi	r17, 0x00	; 0
		TCNT2 = T2_Init_val;
	}
	//case of tick_num is bigger than 256 (16.4 ms)
	else
	{
		for (i = 130; i <= 256; i++) //check if the number of overflows is integer
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	c8 1a       	sub	r12, r24
    14ce:	d8 0a       	sbc	r13, r24
    14d0:	e8 0a       	sbc	r14, r24
    14d2:	f8 0a       	sbc	r15, r24
    14d4:	08 c0       	rjmp	.+16     	; 0x14e6 <TIMER2_SetDelay+0xfe>
    14d6:	0f 2e       	mov	r0, r31
    14d8:	f2 e8       	ldi	r31, 0x82	; 130
    14da:	cf 2e       	mov	r12, r31
    14dc:	d1 2c       	mov	r13, r1
    14de:	e1 2c       	mov	r14, r1
    14e0:	f1 2c       	mov	r15, r1
    14e2:	f0 2d       	mov	r31, r0
    14e4:	11 e0       	ldi	r17, 0x01	; 1
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	c8 16       	cp	r12, r24
    14ea:	d8 06       	cpc	r13, r24
    14ec:	e1 04       	cpc	r14, r1
    14ee:	f1 04       	cpc	r15, r1
    14f0:	08 f4       	brcc	.+2      	; 0x14f4 <TIMER2_SetDelay+0x10c>
    14f2:	b4 cf       	rjmp	.-152    	; 0x145c <TIMER2_SetDelay+0x74>
				TCNT2 = T2_Init_val; //initializing the TCNT0 with Init_val
				check = 0; //variable to use in checking of number of OVF being integer or decimal
			}
		}
		//
		if (check) //check if the number of OVF is decimal
    14f4:	11 23       	and	r17, r17
    14f6:	b1 f1       	breq	.+108    	; 0x1564 <TIMER2_SetDelay+0x17c>
		{
			T2_OVF_No += Tick_num / 256;
    14f8:	03 2e       	mov	r0, r19
    14fa:	3e e0       	ldi	r19, 0x0E	; 14
    14fc:	76 94       	lsr	r7
    14fe:	67 94       	ror	r6
    1500:	57 94       	ror	r5
    1502:	47 94       	ror	r4
    1504:	3a 95       	dec	r19
    1506:	d1 f7       	brne	.-12     	; 0x14fc <TIMER2_SetDelay+0x114>
    1508:	30 2d       	mov	r19, r0
    150a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <T2_OVF_No>
    150e:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <T2_OVF_No+0x1>
    1512:	a0 91 65 00 	lds	r26, 0x0065	; 0x800065 <T2_OVF_No+0x2>
    1516:	b0 91 66 00 	lds	r27, 0x0066	; 0x800066 <T2_OVF_No+0x3>
    151a:	48 0e       	add	r4, r24
    151c:	59 1e       	adc	r5, r25
    151e:	6a 1e       	adc	r6, r26
    1520:	7b 1e       	adc	r7, r27
    1522:	40 92 63 00 	sts	0x0063, r4	; 0x800063 <T2_OVF_No>
    1526:	50 92 64 00 	sts	0x0064, r5	; 0x800064 <T2_OVF_No+0x1>
    152a:	60 92 65 00 	sts	0x0065, r6	; 0x800065 <T2_OVF_No+0x2>
    152e:	70 92 66 00 	sts	0x0066, r7	; 0x800066 <T2_OVF_No+0x3>
			T2_Init_val = 256 - (Tick_num % 256);
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	a0 e0       	ldi	r26, 0x00	; 0
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	88 19       	sub	r24, r8
    153c:	91 09       	sbc	r25, r1
    153e:	a1 09       	sbc	r26, r1
    1540:	b1 09       	sbc	r27, r1
    1542:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <T2_Init_val>
    1546:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <T2_Init_val+0x1>
    154a:	a0 93 9b 00 	sts	0x009B, r26	; 0x80009b <T2_Init_val+0x2>
    154e:	b0 93 9c 00 	sts	0x009C, r27	; 0x80009c <T2_Init_val+0x3>
			T2_Init_val_OVF = 0;
    1552:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <T2_Init_val_OVF>
    1556:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <T2_Init_val_OVF+0x1>
    155a:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <T2_Init_val_OVF+0x2>
    155e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <T2_Init_val_OVF+0x3>
			TCNT2 = T2_Init_val; //initializing the TCNT0
    1562:	84 bd       	out	0x24, r24	; 36
			OCR2 = T2_Init_val;
		}
	}
	#endif

}
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	df 90       	pop	r13
    1570:	cf 90       	pop	r12
    1572:	bf 90       	pop	r11
    1574:	af 90       	pop	r10
    1576:	9f 90       	pop	r9
    1578:	8f 90       	pop	r8
    157a:	7f 90       	pop	r7
    157c:	6f 90       	pop	r6
    157e:	5f 90       	pop	r5
    1580:	4f 90       	pop	r4
    1582:	08 95       	ret

00001584 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    1584:	1f 92       	push	r1
    1586:	0f 92       	push	r0
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	0f 92       	push	r0
    158c:	11 24       	eor	r1, r1
    158e:	2f 93       	push	r18
    1590:	3f 93       	push	r19
    1592:	4f 93       	push	r20
    1594:	5f 93       	push	r21
    1596:	6f 93       	push	r22
    1598:	7f 93       	push	r23
    159a:	8f 93       	push	r24
    159c:	9f 93       	push	r25
    159e:	af 93       	push	r26
    15a0:	bf 93       	push	r27
    15a2:	ef 93       	push	r30
    15a4:	ff 93       	push	r31
	static int T2_OVF_count_0 = 0; //counter to count the number of overflows

	T2_OVF_count_0++;
    15a6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <T2_OVF_count_0.1922>
    15aa:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <T2_OVF_count_0.1922+0x1>
    15ae:	01 96       	adiw	r24, 0x01	; 1
    15b0:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <T2_OVF_count_0.1922+0x1>
    15b4:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <T2_OVF_count_0.1922>
	if (T2_OVF_No == 1)
    15b8:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <T2_OVF_No>
    15bc:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <T2_OVF_No+0x1>
    15c0:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <T2_OVF_No+0x2>
    15c4:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <T2_OVF_No+0x3>
    15c8:	41 30       	cpi	r20, 0x01	; 1
    15ca:	51 05       	cpc	r21, r1
    15cc:	61 05       	cpc	r22, r1
    15ce:	71 05       	cpc	r23, r1
    15d0:	91 f4       	brne	.+36     	; 0x15f6 <__vector_5+0x72>
	{
		if (T2_OVF_count_0 == T2_OVF_No)
    15d2:	09 2e       	mov	r0, r25
    15d4:	00 0c       	add	r0, r0
    15d6:	aa 0b       	sbc	r26, r26
    15d8:	bb 0b       	sbc	r27, r27
    15da:	48 17       	cp	r20, r24
    15dc:	59 07       	cpc	r21, r25
    15de:	6a 07       	cpc	r22, r26
    15e0:	7b 07       	cpc	r23, r27
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <__vector_5+0x62>
    15e4:	49 c0       	rjmp	.+146    	; 0x1678 <__vector_5+0xf4>
		{
			//write your code here

			
			T2_OVF_count_0 = 0;
    15e6:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <T2_OVF_count_0.1922+0x1>
    15ea:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <T2_OVF_count_0.1922>
			TCNT2 = T2_Init_val;
    15ee:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <T2_Init_val>
    15f2:	84 bd       	out	0x24, r24	; 36
    15f4:	41 c0       	rjmp	.+130    	; 0x1678 <__vector_5+0xf4>
		}
	}
	else
	{
		if (T2_OVF_count_0 == 1)
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	21 f4       	brne	.+8      	; 0x1604 <__vector_5+0x80>
		{
			TCNT2 = T2_Init_val_OVF;
    15fc:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <T2_Init_val_OVF>
    1600:	84 bd       	out	0x24, r24	; 36
    1602:	3a c0       	rjmp	.+116    	; 0x1678 <__vector_5+0xf4>
		}
		else if (T2_OVF_count_0 == T2_OVF_No)
    1604:	09 2e       	mov	r0, r25
    1606:	00 0c       	add	r0, r0
    1608:	aa 0b       	sbc	r26, r26
    160a:	bb 0b       	sbc	r27, r27
    160c:	48 17       	cp	r20, r24
    160e:	59 07       	cpc	r21, r25
    1610:	6a 07       	cpc	r22, r26
    1612:	7b 07       	cpc	r23, r27
    1614:	89 f5       	brne	.+98     	; 0x1678 <__vector_5+0xf4>
		{
			//write your code here
			T2_OVF_count_1++;
    1616:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <T2_OVF_count_1>
    161a:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <T2_OVF_count_1+0x1>
    161e:	2f 5f       	subi	r18, 0xFF	; 255
    1620:	3f 4f       	sbci	r19, 0xFF	; 255
    1622:	30 93 88 00 	sts	0x0088, r19	; 0x800088 <T2_OVF_count_1+0x1>
    1626:	20 93 87 00 	sts	0x0087, r18	; 0x800087 <T2_OVF_count_1>
			
			if ((T2_OVF_count_1 % 6 == 0) && Task_Timer_Switch == 1)
    162a:	c9 01       	movw	r24, r18
    162c:	66 e0       	ldi	r22, 0x06	; 6
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divmodhi4>
    1634:	89 2b       	or	r24, r25
    1636:	49 f4       	brne	.+18     	; 0x164a <__vector_5+0xc6>
    1638:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Task_Timer_Switch>
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	29 f4       	brne	.+10     	; 0x164a <__vector_5+0xc6>
			{
				DIO_TogglePin(DIO_PORTC, DIO_PIN_2);
    1640:	62 e0       	ldi	r22, 0x02	; 2
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_TogglePin>
    1648:	10 c0       	rjmp	.+32     	; 0x166a <__vector_5+0xe6>
			}			
			else if ((T2_OVF_count_1 % 30 == 0) && Task_Timer_Switch == 0)
    164a:	c9 01       	movw	r24, r18
    164c:	6e e1       	ldi	r22, 0x1E	; 30
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	0e 94 a5 0b 	call	0x174a	; 0x174a <__divmodhi4>
    1654:	89 2b       	or	r24, r25
    1656:	49 f4       	brne	.+18     	; 0x166a <__vector_5+0xe6>
    1658:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Task_Timer_Switch>
    165c:	81 11       	cpse	r24, r1
    165e:	05 c0       	rjmp	.+10     	; 0x166a <__vector_5+0xe6>
			{
				Mode_Selector = 1;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Mode_Selector>
				TIMER2_Stop();
    1666:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <TIMER2_Stop>
			}

			
			T2_OVF_count_0 = 0;
    166a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <T2_OVF_count_0.1922+0x1>
    166e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <T2_OVF_count_0.1922>
			TCNT2 = T2_Init_val;
    1672:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <T2_Init_val>
    1676:	84 bd       	out	0x24, r24	; 36
			
		}
	}
}
    1678:	ff 91       	pop	r31
    167a:	ef 91       	pop	r30
    167c:	bf 91       	pop	r27
    167e:	af 91       	pop	r26
    1680:	9f 91       	pop	r25
    1682:	8f 91       	pop	r24
    1684:	7f 91       	pop	r23
    1686:	6f 91       	pop	r22
    1688:	5f 91       	pop	r21
    168a:	4f 91       	pop	r20
    168c:	3f 91       	pop	r19
    168e:	2f 91       	pop	r18
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	0f 90       	pop	r0
    1696:	1f 90       	pop	r1
    1698:	18 95       	reti

0000169a <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    169a:	1f 92       	push	r1
    169c:	0f 92       	push	r0
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	0f 92       	push	r0
    16a2:	11 24       	eor	r1, r1
    16a4:	4f 93       	push	r20
    16a6:	5f 93       	push	r21
    16a8:	6f 93       	push	r22
    16aa:	7f 93       	push	r23
    16ac:	8f 93       	push	r24
    16ae:	9f 93       	push	r25
    16b0:	af 93       	push	r26
    16b2:	bf 93       	push	r27
	static int T2_COMP_count_0 = 0; //counter to count the number of overflows
	static int T2_COMP_count_1 = 0; //counter to count
	T2_COMP_count_0++;
    16b4:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <T2_COMP_count_0.1928>
    16b8:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <T2_COMP_count_0.1928+0x1>
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <T2_COMP_count_0.1928+0x1>
    16c2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <T2_COMP_count_0.1928>
	if (T2_OVF_No == 1)
    16c6:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <T2_OVF_No>
    16ca:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <T2_OVF_No+0x1>
    16ce:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <T2_OVF_No+0x2>
    16d2:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <T2_OVF_No+0x3>
    16d6:	41 30       	cpi	r20, 0x01	; 1
    16d8:	51 05       	cpc	r21, r1
    16da:	61 05       	cpc	r22, r1
    16dc:	71 05       	cpc	r23, r1
    16de:	89 f4       	brne	.+34     	; 0x1702 <__vector_4+0x68>
	{
		if (T2_COMP_count_0 == T2_OVF_No)
    16e0:	09 2e       	mov	r0, r25
    16e2:	00 0c       	add	r0, r0
    16e4:	aa 0b       	sbc	r26, r26
    16e6:	bb 0b       	sbc	r27, r27
    16e8:	48 17       	cp	r20, r24
    16ea:	59 07       	cpc	r21, r25
    16ec:	6a 07       	cpc	r22, r26
    16ee:	7b 07       	cpc	r23, r27
    16f0:	f9 f4       	brne	.+62     	; 0x1730 <__vector_4+0x96>
		{
			//write your code here

			T2_COMP_count_0 = 0;
    16f2:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <T2_COMP_count_0.1928+0x1>
    16f6:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <T2_COMP_count_0.1928>
			OCR2 = T2_Init_val;
    16fa:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <T2_Init_val>
    16fe:	83 bd       	out	0x23, r24	; 35
    1700:	17 c0       	rjmp	.+46     	; 0x1730 <__vector_4+0x96>
		}
	}
	else
	{
		if (T2_COMP_count_0 == 1)
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 05       	cpc	r25, r1
    1706:	21 f4       	brne	.+8      	; 0x1710 <__vector_4+0x76>
		{
			OCR2 = T2_Init_val_OVF;
    1708:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <T2_Init_val_OVF>
    170c:	83 bd       	out	0x23, r24	; 35
    170e:	10 c0       	rjmp	.+32     	; 0x1730 <__vector_4+0x96>
		}
		else if (T2_COMP_count_0 == T2_OVF_No)
    1710:	09 2e       	mov	r0, r25
    1712:	00 0c       	add	r0, r0
    1714:	aa 0b       	sbc	r26, r26
    1716:	bb 0b       	sbc	r27, r27
    1718:	48 17       	cp	r20, r24
    171a:	59 07       	cpc	r21, r25
    171c:	6a 07       	cpc	r22, r26
    171e:	7b 07       	cpc	r23, r27
    1720:	39 f4       	brne	.+14     	; 0x1730 <__vector_4+0x96>
		{
			//write your code here

			T2_COMP_count_0 = 0;
    1722:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <T2_COMP_count_0.1928+0x1>
    1726:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <T2_COMP_count_0.1928>
			OCR2 = T2_Init_val;
    172a:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <T2_Init_val>
    172e:	83 bd       	out	0x23, r24	; 35
		}
	}
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	0f 90       	pop	r0
    1746:	1f 90       	pop	r1
    1748:	18 95       	reti

0000174a <__divmodhi4>:
    174a:	97 fb       	bst	r25, 7
    174c:	07 2e       	mov	r0, r23
    174e:	16 f4       	brtc	.+4      	; 0x1754 <__divmodhi4+0xa>
    1750:	00 94       	com	r0
    1752:	07 d0       	rcall	.+14     	; 0x1762 <__divmodhi4_neg1>
    1754:	77 fd       	sbrc	r23, 7
    1756:	09 d0       	rcall	.+18     	; 0x176a <__divmodhi4_neg2>
    1758:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__udivmodhi4>
    175c:	07 fc       	sbrc	r0, 7
    175e:	05 d0       	rcall	.+10     	; 0x176a <__divmodhi4_neg2>
    1760:	3e f4       	brtc	.+14     	; 0x1770 <__divmodhi4_exit>

00001762 <__divmodhi4_neg1>:
    1762:	90 95       	com	r25
    1764:	81 95       	neg	r24
    1766:	9f 4f       	sbci	r25, 0xFF	; 255
    1768:	08 95       	ret

0000176a <__divmodhi4_neg2>:
    176a:	70 95       	com	r23
    176c:	61 95       	neg	r22
    176e:	7f 4f       	sbci	r23, 0xFF	; 255

00001770 <__divmodhi4_exit>:
    1770:	08 95       	ret

00001772 <__udivmodsi4>:
    1772:	a1 e2       	ldi	r26, 0x21	; 33
    1774:	1a 2e       	mov	r1, r26
    1776:	aa 1b       	sub	r26, r26
    1778:	bb 1b       	sub	r27, r27
    177a:	fd 01       	movw	r30, r26
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <__udivmodsi4_ep>

0000177e <__udivmodsi4_loop>:
    177e:	aa 1f       	adc	r26, r26
    1780:	bb 1f       	adc	r27, r27
    1782:	ee 1f       	adc	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	a2 17       	cp	r26, r18
    1788:	b3 07       	cpc	r27, r19
    178a:	e4 07       	cpc	r30, r20
    178c:	f5 07       	cpc	r31, r21
    178e:	20 f0       	brcs	.+8      	; 0x1798 <__udivmodsi4_ep>
    1790:	a2 1b       	sub	r26, r18
    1792:	b3 0b       	sbc	r27, r19
    1794:	e4 0b       	sbc	r30, r20
    1796:	f5 0b       	sbc	r31, r21

00001798 <__udivmodsi4_ep>:
    1798:	66 1f       	adc	r22, r22
    179a:	77 1f       	adc	r23, r23
    179c:	88 1f       	adc	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	1a 94       	dec	r1
    17a2:	69 f7       	brne	.-38     	; 0x177e <__udivmodsi4_loop>
    17a4:	60 95       	com	r22
    17a6:	70 95       	com	r23
    17a8:	80 95       	com	r24
    17aa:	90 95       	com	r25
    17ac:	9b 01       	movw	r18, r22
    17ae:	ac 01       	movw	r20, r24
    17b0:	bd 01       	movw	r22, r26
    17b2:	cf 01       	movw	r24, r30
    17b4:	08 95       	ret

000017b6 <__muluhisi3>:
    17b6:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__umulhisi3>
    17ba:	a5 9f       	mul	r26, r21
    17bc:	90 0d       	add	r25, r0
    17be:	b4 9f       	mul	r27, r20
    17c0:	90 0d       	add	r25, r0
    17c2:	a4 9f       	mul	r26, r20
    17c4:	80 0d       	add	r24, r0
    17c6:	91 1d       	adc	r25, r1
    17c8:	11 24       	eor	r1, r1
    17ca:	08 95       	ret

000017cc <__udivmodhi4>:
    17cc:	aa 1b       	sub	r26, r26
    17ce:	bb 1b       	sub	r27, r27
    17d0:	51 e1       	ldi	r21, 0x11	; 17
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <__udivmodhi4_ep>

000017d4 <__udivmodhi4_loop>:
    17d4:	aa 1f       	adc	r26, r26
    17d6:	bb 1f       	adc	r27, r27
    17d8:	a6 17       	cp	r26, r22
    17da:	b7 07       	cpc	r27, r23
    17dc:	10 f0       	brcs	.+4      	; 0x17e2 <__udivmodhi4_ep>
    17de:	a6 1b       	sub	r26, r22
    17e0:	b7 0b       	sbc	r27, r23

000017e2 <__udivmodhi4_ep>:
    17e2:	88 1f       	adc	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	5a 95       	dec	r21
    17e8:	a9 f7       	brne	.-22     	; 0x17d4 <__udivmodhi4_loop>
    17ea:	80 95       	com	r24
    17ec:	90 95       	com	r25
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	08 95       	ret

000017f4 <__umulhisi3>:
    17f4:	a2 9f       	mul	r26, r18
    17f6:	b0 01       	movw	r22, r0
    17f8:	b3 9f       	mul	r27, r19
    17fa:	c0 01       	movw	r24, r0
    17fc:	a3 9f       	mul	r26, r19
    17fe:	70 0d       	add	r23, r0
    1800:	81 1d       	adc	r24, r1
    1802:	11 24       	eor	r1, r1
    1804:	91 1d       	adc	r25, r1
    1806:	b2 9f       	mul	r27, r18
    1808:	70 0d       	add	r23, r0
    180a:	81 1d       	adc	r24, r1
    180c:	11 24       	eor	r1, r1
    180e:	91 1d       	adc	r25, r1
    1810:	08 95       	ret

00001812 <_exit>:
    1812:	f8 94       	cli

00001814 <__stop_program>:
    1814:	ff cf       	rjmp	.-2      	; 0x1814 <__stop_program>
